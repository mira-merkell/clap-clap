/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const CLAP_VERSION_MAJOR: u32 = 1;
pub const CLAP_VERSION_MINOR: u32 = 2;
pub const CLAP_VERSION_REVISION: u32 = 3;
pub const CLAP_PLUGIN_FEATURE_INSTRUMENT: &[u8; 11] = b"instrument\0";
pub const CLAP_PLUGIN_FEATURE_AUDIO_EFFECT: &[u8; 13] = b"audio-effect\0";
pub const CLAP_PLUGIN_FEATURE_NOTE_EFFECT: &[u8; 12] = b"note-effect\0";
pub const CLAP_PLUGIN_FEATURE_NOTE_DETECTOR: &[u8; 14] = b"note-detector\0";
pub const CLAP_PLUGIN_FEATURE_ANALYZER: &[u8; 9] = b"analyzer\0";
pub const CLAP_PLUGIN_FEATURE_SYNTHESIZER: &[u8; 12] = b"synthesizer\0";
pub const CLAP_PLUGIN_FEATURE_SAMPLER: &[u8; 8] = b"sampler\0";
pub const CLAP_PLUGIN_FEATURE_DRUM: &[u8; 5] = b"drum\0";
pub const CLAP_PLUGIN_FEATURE_DRUM_MACHINE: &[u8; 13] = b"drum-machine\0";
pub const CLAP_PLUGIN_FEATURE_FILTER: &[u8; 7] = b"filter\0";
pub const CLAP_PLUGIN_FEATURE_PHASER: &[u8; 7] = b"phaser\0";
pub const CLAP_PLUGIN_FEATURE_EQUALIZER: &[u8; 10] = b"equalizer\0";
pub const CLAP_PLUGIN_FEATURE_DEESSER: &[u8; 9] = b"de-esser\0";
pub const CLAP_PLUGIN_FEATURE_PHASE_VOCODER: &[u8; 14] = b"phase-vocoder\0";
pub const CLAP_PLUGIN_FEATURE_GRANULAR: &[u8; 9] = b"granular\0";
pub const CLAP_PLUGIN_FEATURE_FREQUENCY_SHIFTER: &[u8; 18] = b"frequency-shifter\0";
pub const CLAP_PLUGIN_FEATURE_PITCH_SHIFTER: &[u8; 14] = b"pitch-shifter\0";
pub const CLAP_PLUGIN_FEATURE_DISTORTION: &[u8; 11] = b"distortion\0";
pub const CLAP_PLUGIN_FEATURE_TRANSIENT_SHAPER: &[u8; 17] = b"transient-shaper\0";
pub const CLAP_PLUGIN_FEATURE_COMPRESSOR: &[u8; 11] = b"compressor\0";
pub const CLAP_PLUGIN_FEATURE_EXPANDER: &[u8; 9] = b"expander\0";
pub const CLAP_PLUGIN_FEATURE_GATE: &[u8; 5] = b"gate\0";
pub const CLAP_PLUGIN_FEATURE_LIMITER: &[u8; 8] = b"limiter\0";
pub const CLAP_PLUGIN_FEATURE_FLANGER: &[u8; 8] = b"flanger\0";
pub const CLAP_PLUGIN_FEATURE_CHORUS: &[u8; 7] = b"chorus\0";
pub const CLAP_PLUGIN_FEATURE_DELAY: &[u8; 6] = b"delay\0";
pub const CLAP_PLUGIN_FEATURE_REVERB: &[u8; 7] = b"reverb\0";
pub const CLAP_PLUGIN_FEATURE_TREMOLO: &[u8; 8] = b"tremolo\0";
pub const CLAP_PLUGIN_FEATURE_GLITCH: &[u8; 7] = b"glitch\0";
pub const CLAP_PLUGIN_FEATURE_UTILITY: &[u8; 8] = b"utility\0";
pub const CLAP_PLUGIN_FEATURE_PITCH_CORRECTION: &[u8; 17] = b"pitch-correction\0";
pub const CLAP_PLUGIN_FEATURE_RESTORATION: &[u8; 12] = b"restoration\0";
pub const CLAP_PLUGIN_FEATURE_MULTI_EFFECTS: &[u8; 14] = b"multi-effects\0";
pub const CLAP_PLUGIN_FEATURE_MIXING: &[u8; 7] = b"mixing\0";
pub const CLAP_PLUGIN_FEATURE_MASTERING: &[u8; 10] = b"mastering\0";
pub const CLAP_PLUGIN_FEATURE_MONO: &[u8; 5] = b"mono\0";
pub const CLAP_PLUGIN_FEATURE_STEREO: &[u8; 7] = b"stereo\0";
pub const CLAP_PLUGIN_FEATURE_SURROUND: &[u8; 9] = b"surround\0";
pub const CLAP_PLUGIN_FEATURE_AMBISONIC: &[u8; 10] = b"ambisonic\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_version {
    pub major: u32,
    pub minor: u32,
    pub revision: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_version"][::std::mem::size_of::<clap_version>() - 12usize];
    ["Alignment of clap_version"][::std::mem::align_of::<clap_version>() - 4usize];
    ["Offset of field: clap_version::major"][::std::mem::offset_of!(clap_version, major) - 0usize];
    ["Offset of field: clap_version::minor"][::std::mem::offset_of!(clap_version, minor) - 4usize];
    ["Offset of field: clap_version::revision"]
        [::std::mem::offset_of!(clap_version, revision) - 8usize];
};
pub type clap_version_t = clap_version;
unsafe extern "C" {
    pub static CLAP_VERSION: clap_version_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_entry {
    pub clap_version: clap_version_t,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(plugin_path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub deinit: ::std::option::Option<unsafe extern "C" fn()>,
    pub get_factory: ::std::option::Option<
        unsafe extern "C" fn(
            factory_id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_entry"][::std::mem::size_of::<clap_plugin_entry>() - 40usize];
    ["Alignment of clap_plugin_entry"][::std::mem::align_of::<clap_plugin_entry>() - 8usize];
    ["Offset of field: clap_plugin_entry::clap_version"]
        [::std::mem::offset_of!(clap_plugin_entry, clap_version) - 0usize];
    ["Offset of field: clap_plugin_entry::init"]
        [::std::mem::offset_of!(clap_plugin_entry, init) - 16usize];
    ["Offset of field: clap_plugin_entry::deinit"]
        [::std::mem::offset_of!(clap_plugin_entry, deinit) - 24usize];
    ["Offset of field: clap_plugin_entry::get_factory"]
        [::std::mem::offset_of!(clap_plugin_entry, get_factory) - 32usize];
};
pub type clap_plugin_entry_t = clap_plugin_entry;
unsafe extern "C" {
    pub static clap_entry: clap_plugin_entry_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host {
    pub clap_version: clap_version_t,
    pub host_data: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub vendor: *const ::std::os::raw::c_char,
    pub url: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host,
            extension_id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub request_restart: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host)>,
    pub request_process: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host)>,
    pub request_callback: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host"][::std::mem::size_of::<clap_host>() - 88usize];
    ["Alignment of clap_host"][::std::mem::align_of::<clap_host>() - 8usize];
    ["Offset of field: clap_host::clap_version"]
        [::std::mem::offset_of!(clap_host, clap_version) - 0usize];
    ["Offset of field: clap_host::host_data"]
        [::std::mem::offset_of!(clap_host, host_data) - 16usize];
    ["Offset of field: clap_host::name"][::std::mem::offset_of!(clap_host, name) - 24usize];
    ["Offset of field: clap_host::vendor"][::std::mem::offset_of!(clap_host, vendor) - 32usize];
    ["Offset of field: clap_host::url"][::std::mem::offset_of!(clap_host, url) - 40usize];
    ["Offset of field: clap_host::version"][::std::mem::offset_of!(clap_host, version) - 48usize];
    ["Offset of field: clap_host::get_extension"]
        [::std::mem::offset_of!(clap_host, get_extension) - 56usize];
    ["Offset of field: clap_host::request_restart"]
        [::std::mem::offset_of!(clap_host, request_restart) - 64usize];
    ["Offset of field: clap_host::request_process"]
        [::std::mem::offset_of!(clap_host, request_process) - 72usize];
    ["Offset of field: clap_host::request_callback"]
        [::std::mem::offset_of!(clap_host, request_callback) - 80usize];
};
pub type clap_host_t = clap_host;
#[doc = " We use fixed point representation of beat time and seconds time\n Usage:\n   double x = ...; // in beats\n   clap_beattime y = round(CLAP_BEATTIME_FACTOR * x);"]
pub const CLAP_BEATTIME_FACTOR: i64 = 2147483648;
pub const CLAP_SECTIME_FACTOR: i64 = 2147483648;
pub type clap_beattime = i64;
pub type clap_sectime = i64;
pub type clap_id = u32;
pub const CLAP_INVALID_ID: clap_id = 4294967295;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_header {
    pub size: u32,
    pub time: u32,
    pub space_id: u16,
    pub type_: u16,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_header"][::std::mem::size_of::<clap_event_header>() - 16usize];
    ["Alignment of clap_event_header"][::std::mem::align_of::<clap_event_header>() - 4usize];
    ["Offset of field: clap_event_header::size"]
        [::std::mem::offset_of!(clap_event_header, size) - 0usize];
    ["Offset of field: clap_event_header::time"]
        [::std::mem::offset_of!(clap_event_header, time) - 4usize];
    ["Offset of field: clap_event_header::space_id"]
        [::std::mem::offset_of!(clap_event_header, space_id) - 8usize];
    ["Offset of field: clap_event_header::type_"]
        [::std::mem::offset_of!(clap_event_header, type_) - 10usize];
    ["Offset of field: clap_event_header::flags"]
        [::std::mem::offset_of!(clap_event_header, flags) - 12usize];
};
pub type clap_event_header_t = clap_event_header;
pub const CLAP_CORE_EVENT_SPACE_ID: u16 = 0;
pub const clap_event_flags_CLAP_EVENT_IS_LIVE: clap_event_flags = 1;
pub const clap_event_flags_CLAP_EVENT_DONT_RECORD: clap_event_flags = 2;
pub type clap_event_flags = ::std::os::raw::c_uint;
pub const CLAP_EVENT_NOTE_ON: _bindgen_ty_1 = 0;
pub const CLAP_EVENT_NOTE_OFF: _bindgen_ty_1 = 1;
pub const CLAP_EVENT_NOTE_CHOKE: _bindgen_ty_1 = 2;
pub const CLAP_EVENT_NOTE_END: _bindgen_ty_1 = 3;
pub const CLAP_EVENT_NOTE_EXPRESSION: _bindgen_ty_1 = 4;
pub const CLAP_EVENT_PARAM_VALUE: _bindgen_ty_1 = 5;
pub const CLAP_EVENT_PARAM_MOD: _bindgen_ty_1 = 6;
pub const CLAP_EVENT_PARAM_GESTURE_BEGIN: _bindgen_ty_1 = 7;
pub const CLAP_EVENT_PARAM_GESTURE_END: _bindgen_ty_1 = 8;
pub const CLAP_EVENT_TRANSPORT: _bindgen_ty_1 = 9;
pub const CLAP_EVENT_MIDI: _bindgen_ty_1 = 10;
pub const CLAP_EVENT_MIDI_SYSEX: _bindgen_ty_1 = 11;
pub const CLAP_EVENT_MIDI2: _bindgen_ty_1 = 12;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_note {
    pub header: clap_event_header_t,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub velocity: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_note"][::std::mem::size_of::<clap_event_note>() - 40usize];
    ["Alignment of clap_event_note"][::std::mem::align_of::<clap_event_note>() - 8usize];
    ["Offset of field: clap_event_note::header"]
        [::std::mem::offset_of!(clap_event_note, header) - 0usize];
    ["Offset of field: clap_event_note::note_id"]
        [::std::mem::offset_of!(clap_event_note, note_id) - 16usize];
    ["Offset of field: clap_event_note::port_index"]
        [::std::mem::offset_of!(clap_event_note, port_index) - 20usize];
    ["Offset of field: clap_event_note::channel"]
        [::std::mem::offset_of!(clap_event_note, channel) - 22usize];
    ["Offset of field: clap_event_note::key"]
        [::std::mem::offset_of!(clap_event_note, key) - 24usize];
    ["Offset of field: clap_event_note::velocity"]
        [::std::mem::offset_of!(clap_event_note, velocity) - 32usize];
};
pub type clap_event_note_t = clap_event_note;
pub const CLAP_NOTE_EXPRESSION_VOLUME: _bindgen_ty_2 = 0;
pub const CLAP_NOTE_EXPRESSION_PAN: _bindgen_ty_2 = 1;
pub const CLAP_NOTE_EXPRESSION_TUNING: _bindgen_ty_2 = 2;
pub const CLAP_NOTE_EXPRESSION_VIBRATO: _bindgen_ty_2 = 3;
pub const CLAP_NOTE_EXPRESSION_EXPRESSION: _bindgen_ty_2 = 4;
pub const CLAP_NOTE_EXPRESSION_BRIGHTNESS: _bindgen_ty_2 = 5;
pub const CLAP_NOTE_EXPRESSION_PRESSURE: _bindgen_ty_2 = 6;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type clap_note_expression = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_note_expression {
    pub header: clap_event_header_t,
    pub expression_id: clap_note_expression,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub value: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_note_expression"]
        [::std::mem::size_of::<clap_event_note_expression>() - 40usize];
    ["Alignment of clap_event_note_expression"]
        [::std::mem::align_of::<clap_event_note_expression>() - 8usize];
    ["Offset of field: clap_event_note_expression::header"]
        [::std::mem::offset_of!(clap_event_note_expression, header) - 0usize];
    ["Offset of field: clap_event_note_expression::expression_id"]
        [::std::mem::offset_of!(clap_event_note_expression, expression_id) - 16usize];
    ["Offset of field: clap_event_note_expression::note_id"]
        [::std::mem::offset_of!(clap_event_note_expression, note_id) - 20usize];
    ["Offset of field: clap_event_note_expression::port_index"]
        [::std::mem::offset_of!(clap_event_note_expression, port_index) - 24usize];
    ["Offset of field: clap_event_note_expression::channel"]
        [::std::mem::offset_of!(clap_event_note_expression, channel) - 26usize];
    ["Offset of field: clap_event_note_expression::key"]
        [::std::mem::offset_of!(clap_event_note_expression, key) - 28usize];
    ["Offset of field: clap_event_note_expression::value"]
        [::std::mem::offset_of!(clap_event_note_expression, value) - 32usize];
};
pub type clap_event_note_expression_t = clap_event_note_expression;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_param_value {
    pub header: clap_event_header_t,
    pub param_id: clap_id,
    pub cookie: *mut ::std::os::raw::c_void,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub value: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_param_value"][::std::mem::size_of::<clap_event_param_value>() - 56usize];
    ["Alignment of clap_event_param_value"]
        [::std::mem::align_of::<clap_event_param_value>() - 8usize];
    ["Offset of field: clap_event_param_value::header"]
        [::std::mem::offset_of!(clap_event_param_value, header) - 0usize];
    ["Offset of field: clap_event_param_value::param_id"]
        [::std::mem::offset_of!(clap_event_param_value, param_id) - 16usize];
    ["Offset of field: clap_event_param_value::cookie"]
        [::std::mem::offset_of!(clap_event_param_value, cookie) - 24usize];
    ["Offset of field: clap_event_param_value::note_id"]
        [::std::mem::offset_of!(clap_event_param_value, note_id) - 32usize];
    ["Offset of field: clap_event_param_value::port_index"]
        [::std::mem::offset_of!(clap_event_param_value, port_index) - 36usize];
    ["Offset of field: clap_event_param_value::channel"]
        [::std::mem::offset_of!(clap_event_param_value, channel) - 38usize];
    ["Offset of field: clap_event_param_value::key"]
        [::std::mem::offset_of!(clap_event_param_value, key) - 40usize];
    ["Offset of field: clap_event_param_value::value"]
        [::std::mem::offset_of!(clap_event_param_value, value) - 48usize];
};
pub type clap_event_param_value_t = clap_event_param_value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_param_mod {
    pub header: clap_event_header_t,
    pub param_id: clap_id,
    pub cookie: *mut ::std::os::raw::c_void,
    pub note_id: i32,
    pub port_index: i16,
    pub channel: i16,
    pub key: i16,
    pub amount: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_param_mod"][::std::mem::size_of::<clap_event_param_mod>() - 56usize];
    ["Alignment of clap_event_param_mod"][::std::mem::align_of::<clap_event_param_mod>() - 8usize];
    ["Offset of field: clap_event_param_mod::header"]
        [::std::mem::offset_of!(clap_event_param_mod, header) - 0usize];
    ["Offset of field: clap_event_param_mod::param_id"]
        [::std::mem::offset_of!(clap_event_param_mod, param_id) - 16usize];
    ["Offset of field: clap_event_param_mod::cookie"]
        [::std::mem::offset_of!(clap_event_param_mod, cookie) - 24usize];
    ["Offset of field: clap_event_param_mod::note_id"]
        [::std::mem::offset_of!(clap_event_param_mod, note_id) - 32usize];
    ["Offset of field: clap_event_param_mod::port_index"]
        [::std::mem::offset_of!(clap_event_param_mod, port_index) - 36usize];
    ["Offset of field: clap_event_param_mod::channel"]
        [::std::mem::offset_of!(clap_event_param_mod, channel) - 38usize];
    ["Offset of field: clap_event_param_mod::key"]
        [::std::mem::offset_of!(clap_event_param_mod, key) - 40usize];
    ["Offset of field: clap_event_param_mod::amount"]
        [::std::mem::offset_of!(clap_event_param_mod, amount) - 48usize];
};
pub type clap_event_param_mod_t = clap_event_param_mod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_param_gesture {
    pub header: clap_event_header_t,
    pub param_id: clap_id,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_param_gesture"]
        [::std::mem::size_of::<clap_event_param_gesture>() - 20usize];
    ["Alignment of clap_event_param_gesture"]
        [::std::mem::align_of::<clap_event_param_gesture>() - 4usize];
    ["Offset of field: clap_event_param_gesture::header"]
        [::std::mem::offset_of!(clap_event_param_gesture, header) - 0usize];
    ["Offset of field: clap_event_param_gesture::param_id"]
        [::std::mem::offset_of!(clap_event_param_gesture, param_id) - 16usize];
};
pub type clap_event_param_gesture_t = clap_event_param_gesture;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_TEMPO: clap_transport_flags = 1;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_BEATS_TIMELINE: clap_transport_flags = 2;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_SECONDS_TIMELINE: clap_transport_flags = 4;
pub const clap_transport_flags_CLAP_TRANSPORT_HAS_TIME_SIGNATURE: clap_transport_flags = 8;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_PLAYING: clap_transport_flags = 16;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_RECORDING: clap_transport_flags = 32;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_LOOP_ACTIVE: clap_transport_flags = 64;
pub const clap_transport_flags_CLAP_TRANSPORT_IS_WITHIN_PRE_ROLL: clap_transport_flags = 128;
pub type clap_transport_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_transport {
    pub header: clap_event_header_t,
    pub flags: u32,
    pub song_pos_beats: clap_beattime,
    pub song_pos_seconds: clap_sectime,
    pub tempo: f64,
    pub tempo_inc: f64,
    pub loop_start_beats: clap_beattime,
    pub loop_end_beats: clap_beattime,
    pub loop_start_seconds: clap_sectime,
    pub loop_end_seconds: clap_sectime,
    pub bar_start: clap_beattime,
    pub bar_number: i32,
    pub tsig_num: u16,
    pub tsig_denom: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_transport"][::std::mem::size_of::<clap_event_transport>() - 104usize];
    ["Alignment of clap_event_transport"][::std::mem::align_of::<clap_event_transport>() - 8usize];
    ["Offset of field: clap_event_transport::header"]
        [::std::mem::offset_of!(clap_event_transport, header) - 0usize];
    ["Offset of field: clap_event_transport::flags"]
        [::std::mem::offset_of!(clap_event_transport, flags) - 16usize];
    ["Offset of field: clap_event_transport::song_pos_beats"]
        [::std::mem::offset_of!(clap_event_transport, song_pos_beats) - 24usize];
    ["Offset of field: clap_event_transport::song_pos_seconds"]
        [::std::mem::offset_of!(clap_event_transport, song_pos_seconds) - 32usize];
    ["Offset of field: clap_event_transport::tempo"]
        [::std::mem::offset_of!(clap_event_transport, tempo) - 40usize];
    ["Offset of field: clap_event_transport::tempo_inc"]
        [::std::mem::offset_of!(clap_event_transport, tempo_inc) - 48usize];
    ["Offset of field: clap_event_transport::loop_start_beats"]
        [::std::mem::offset_of!(clap_event_transport, loop_start_beats) - 56usize];
    ["Offset of field: clap_event_transport::loop_end_beats"]
        [::std::mem::offset_of!(clap_event_transport, loop_end_beats) - 64usize];
    ["Offset of field: clap_event_transport::loop_start_seconds"]
        [::std::mem::offset_of!(clap_event_transport, loop_start_seconds) - 72usize];
    ["Offset of field: clap_event_transport::loop_end_seconds"]
        [::std::mem::offset_of!(clap_event_transport, loop_end_seconds) - 80usize];
    ["Offset of field: clap_event_transport::bar_start"]
        [::std::mem::offset_of!(clap_event_transport, bar_start) - 88usize];
    ["Offset of field: clap_event_transport::bar_number"]
        [::std::mem::offset_of!(clap_event_transport, bar_number) - 96usize];
    ["Offset of field: clap_event_transport::tsig_num"]
        [::std::mem::offset_of!(clap_event_transport, tsig_num) - 100usize];
    ["Offset of field: clap_event_transport::tsig_denom"]
        [::std::mem::offset_of!(clap_event_transport, tsig_denom) - 102usize];
};
pub type clap_event_transport_t = clap_event_transport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_midi {
    pub header: clap_event_header_t,
    pub port_index: u16,
    pub data: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_midi"][::std::mem::size_of::<clap_event_midi>() - 24usize];
    ["Alignment of clap_event_midi"][::std::mem::align_of::<clap_event_midi>() - 4usize];
    ["Offset of field: clap_event_midi::header"]
        [::std::mem::offset_of!(clap_event_midi, header) - 0usize];
    ["Offset of field: clap_event_midi::port_index"]
        [::std::mem::offset_of!(clap_event_midi, port_index) - 16usize];
    ["Offset of field: clap_event_midi::data"]
        [::std::mem::offset_of!(clap_event_midi, data) - 18usize];
};
pub type clap_event_midi_t = clap_event_midi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_midi_sysex {
    pub header: clap_event_header_t,
    pub port_index: u16,
    pub buffer: *const u8,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_midi_sysex"][::std::mem::size_of::<clap_event_midi_sysex>() - 40usize];
    ["Alignment of clap_event_midi_sysex"]
        [::std::mem::align_of::<clap_event_midi_sysex>() - 8usize];
    ["Offset of field: clap_event_midi_sysex::header"]
        [::std::mem::offset_of!(clap_event_midi_sysex, header) - 0usize];
    ["Offset of field: clap_event_midi_sysex::port_index"]
        [::std::mem::offset_of!(clap_event_midi_sysex, port_index) - 16usize];
    ["Offset of field: clap_event_midi_sysex::buffer"]
        [::std::mem::offset_of!(clap_event_midi_sysex, buffer) - 24usize];
    ["Offset of field: clap_event_midi_sysex::size"]
        [::std::mem::offset_of!(clap_event_midi_sysex, size) - 32usize];
};
pub type clap_event_midi_sysex_t = clap_event_midi_sysex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_event_midi2 {
    pub header: clap_event_header_t,
    pub port_index: u16,
    pub data: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_event_midi2"][::std::mem::size_of::<clap_event_midi2>() - 36usize];
    ["Alignment of clap_event_midi2"][::std::mem::align_of::<clap_event_midi2>() - 4usize];
    ["Offset of field: clap_event_midi2::header"]
        [::std::mem::offset_of!(clap_event_midi2, header) - 0usize];
    ["Offset of field: clap_event_midi2::port_index"]
        [::std::mem::offset_of!(clap_event_midi2, port_index) - 16usize];
    ["Offset of field: clap_event_midi2::data"]
        [::std::mem::offset_of!(clap_event_midi2, data) - 20usize];
};
pub type clap_event_midi2_t = clap_event_midi2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_input_events {
    pub ctx: *mut ::std::os::raw::c_void,
    pub size: ::std::option::Option<unsafe extern "C" fn(list: *const clap_input_events) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            list: *const clap_input_events,
            index: u32,
        ) -> *const clap_event_header_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_input_events"][::std::mem::size_of::<clap_input_events>() - 24usize];
    ["Alignment of clap_input_events"][::std::mem::align_of::<clap_input_events>() - 8usize];
    ["Offset of field: clap_input_events::ctx"]
        [::std::mem::offset_of!(clap_input_events, ctx) - 0usize];
    ["Offset of field: clap_input_events::size"]
        [::std::mem::offset_of!(clap_input_events, size) - 8usize];
    ["Offset of field: clap_input_events::get"]
        [::std::mem::offset_of!(clap_input_events, get) - 16usize];
};
pub type clap_input_events_t = clap_input_events;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_output_events {
    pub ctx: *mut ::std::os::raw::c_void,
    pub try_push: ::std::option::Option<
        unsafe extern "C" fn(
            list: *const clap_output_events,
            event: *const clap_event_header_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_output_events"][::std::mem::size_of::<clap_output_events>() - 16usize];
    ["Alignment of clap_output_events"][::std::mem::align_of::<clap_output_events>() - 8usize];
    ["Offset of field: clap_output_events::ctx"]
        [::std::mem::offset_of!(clap_output_events, ctx) - 0usize];
    ["Offset of field: clap_output_events::try_push"]
        [::std::mem::offset_of!(clap_output_events, try_push) - 8usize];
};
pub type clap_output_events_t = clap_output_events;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_audio_buffer {
    pub data32: *mut *mut f32,
    pub data64: *mut *mut f64,
    pub channel_count: u32,
    pub latency: u32,
    pub constant_mask: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_audio_buffer"][::std::mem::size_of::<clap_audio_buffer>() - 32usize];
    ["Alignment of clap_audio_buffer"][::std::mem::align_of::<clap_audio_buffer>() - 8usize];
    ["Offset of field: clap_audio_buffer::data32"]
        [::std::mem::offset_of!(clap_audio_buffer, data32) - 0usize];
    ["Offset of field: clap_audio_buffer::data64"]
        [::std::mem::offset_of!(clap_audio_buffer, data64) - 8usize];
    ["Offset of field: clap_audio_buffer::channel_count"]
        [::std::mem::offset_of!(clap_audio_buffer, channel_count) - 16usize];
    ["Offset of field: clap_audio_buffer::latency"]
        [::std::mem::offset_of!(clap_audio_buffer, latency) - 20usize];
    ["Offset of field: clap_audio_buffer::constant_mask"]
        [::std::mem::offset_of!(clap_audio_buffer, constant_mask) - 24usize];
};
pub type clap_audio_buffer_t = clap_audio_buffer;
pub const CLAP_PROCESS_ERROR: _bindgen_ty_3 = 0;
pub const CLAP_PROCESS_CONTINUE: _bindgen_ty_3 = 1;
pub const CLAP_PROCESS_CONTINUE_IF_NOT_QUIET: _bindgen_ty_3 = 2;
pub const CLAP_PROCESS_TAIL: _bindgen_ty_3 = 3;
pub const CLAP_PROCESS_SLEEP: _bindgen_ty_3 = 4;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub type clap_process_status = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_process {
    pub steady_time: i64,
    pub frames_count: u32,
    pub transport: *const clap_event_transport_t,
    pub audio_inputs: *const clap_audio_buffer_t,
    pub audio_outputs: *mut clap_audio_buffer_t,
    pub audio_inputs_count: u32,
    pub audio_outputs_count: u32,
    pub in_events: *const clap_input_events_t,
    pub out_events: *const clap_output_events_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_process"][::std::mem::size_of::<clap_process>() - 64usize];
    ["Alignment of clap_process"][::std::mem::align_of::<clap_process>() - 8usize];
    ["Offset of field: clap_process::steady_time"]
        [::std::mem::offset_of!(clap_process, steady_time) - 0usize];
    ["Offset of field: clap_process::frames_count"]
        [::std::mem::offset_of!(clap_process, frames_count) - 8usize];
    ["Offset of field: clap_process::transport"]
        [::std::mem::offset_of!(clap_process, transport) - 16usize];
    ["Offset of field: clap_process::audio_inputs"]
        [::std::mem::offset_of!(clap_process, audio_inputs) - 24usize];
    ["Offset of field: clap_process::audio_outputs"]
        [::std::mem::offset_of!(clap_process, audio_outputs) - 32usize];
    ["Offset of field: clap_process::audio_inputs_count"]
        [::std::mem::offset_of!(clap_process, audio_inputs_count) - 40usize];
    ["Offset of field: clap_process::audio_outputs_count"]
        [::std::mem::offset_of!(clap_process, audio_outputs_count) - 44usize];
    ["Offset of field: clap_process::in_events"]
        [::std::mem::offset_of!(clap_process, in_events) - 48usize];
    ["Offset of field: clap_process::out_events"]
        [::std::mem::offset_of!(clap_process, out_events) - 56usize];
};
pub type clap_process_t = clap_process;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_descriptor {
    pub clap_version: clap_version_t,
    pub id: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub vendor: *const ::std::os::raw::c_char,
    pub url: *const ::std::os::raw::c_char,
    pub manual_url: *const ::std::os::raw::c_char,
    pub support_url: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub features: *const *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_descriptor"][::std::mem::size_of::<clap_plugin_descriptor>() - 88usize];
    ["Alignment of clap_plugin_descriptor"]
        [::std::mem::align_of::<clap_plugin_descriptor>() - 8usize];
    ["Offset of field: clap_plugin_descriptor::clap_version"]
        [::std::mem::offset_of!(clap_plugin_descriptor, clap_version) - 0usize];
    ["Offset of field: clap_plugin_descriptor::id"]
        [::std::mem::offset_of!(clap_plugin_descriptor, id) - 16usize];
    ["Offset of field: clap_plugin_descriptor::name"]
        [::std::mem::offset_of!(clap_plugin_descriptor, name) - 24usize];
    ["Offset of field: clap_plugin_descriptor::vendor"]
        [::std::mem::offset_of!(clap_plugin_descriptor, vendor) - 32usize];
    ["Offset of field: clap_plugin_descriptor::url"]
        [::std::mem::offset_of!(clap_plugin_descriptor, url) - 40usize];
    ["Offset of field: clap_plugin_descriptor::manual_url"]
        [::std::mem::offset_of!(clap_plugin_descriptor, manual_url) - 48usize];
    ["Offset of field: clap_plugin_descriptor::support_url"]
        [::std::mem::offset_of!(clap_plugin_descriptor, support_url) - 56usize];
    ["Offset of field: clap_plugin_descriptor::version"]
        [::std::mem::offset_of!(clap_plugin_descriptor, version) - 64usize];
    ["Offset of field: clap_plugin_descriptor::description"]
        [::std::mem::offset_of!(clap_plugin_descriptor, description) - 72usize];
    ["Offset of field: clap_plugin_descriptor::features"]
        [::std::mem::offset_of!(clap_plugin_descriptor, features) - 80usize];
};
pub type clap_plugin_descriptor_t = clap_plugin_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin {
    pub desc: *const clap_plugin_descriptor_t,
    pub plugin_data: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin) -> bool>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub activate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin,
            sample_rate: f64,
            min_frames_count: u32,
            max_frames_count: u32,
        ) -> bool,
    >,
    pub deactivate: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub start_processing:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin) -> bool>,
    pub stop_processing: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub reset: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
    pub process: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin,
            process: *const clap_process_t,
        ) -> clap_process_status,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin,
            id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub on_main_thread: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin"][::std::mem::size_of::<clap_plugin>() - 96usize];
    ["Alignment of clap_plugin"][::std::mem::align_of::<clap_plugin>() - 8usize];
    ["Offset of field: clap_plugin::desc"][::std::mem::offset_of!(clap_plugin, desc) - 0usize];
    ["Offset of field: clap_plugin::plugin_data"]
        [::std::mem::offset_of!(clap_plugin, plugin_data) - 8usize];
    ["Offset of field: clap_plugin::init"][::std::mem::offset_of!(clap_plugin, init) - 16usize];
    ["Offset of field: clap_plugin::destroy"]
        [::std::mem::offset_of!(clap_plugin, destroy) - 24usize];
    ["Offset of field: clap_plugin::activate"]
        [::std::mem::offset_of!(clap_plugin, activate) - 32usize];
    ["Offset of field: clap_plugin::deactivate"]
        [::std::mem::offset_of!(clap_plugin, deactivate) - 40usize];
    ["Offset of field: clap_plugin::start_processing"]
        [::std::mem::offset_of!(clap_plugin, start_processing) - 48usize];
    ["Offset of field: clap_plugin::stop_processing"]
        [::std::mem::offset_of!(clap_plugin, stop_processing) - 56usize];
    ["Offset of field: clap_plugin::reset"][::std::mem::offset_of!(clap_plugin, reset) - 64usize];
    ["Offset of field: clap_plugin::process"]
        [::std::mem::offset_of!(clap_plugin, process) - 72usize];
    ["Offset of field: clap_plugin::get_extension"]
        [::std::mem::offset_of!(clap_plugin, get_extension) - 80usize];
    ["Offset of field: clap_plugin::on_main_thread"]
        [::std::mem::offset_of!(clap_plugin, on_main_thread) - 88usize];
};
pub type clap_plugin_t = clap_plugin;
pub const CLAP_PLUGIN_FACTORY_ID: &[u8; 20] = b"clap.plugin-factory\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_factory {
    pub get_plugin_count:
        ::std::option::Option<unsafe extern "C" fn(factory: *const clap_plugin_factory) -> u32>,
    pub get_plugin_descriptor: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *const clap_plugin_factory,
            index: u32,
        ) -> *const clap_plugin_descriptor_t,
    >,
    pub create_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *const clap_plugin_factory,
            host: *const clap_host_t,
            plugin_id: *const ::std::os::raw::c_char,
        ) -> *const clap_plugin_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_factory"][::std::mem::size_of::<clap_plugin_factory>() - 24usize];
    ["Alignment of clap_plugin_factory"][::std::mem::align_of::<clap_plugin_factory>() - 8usize];
    ["Offset of field: clap_plugin_factory::get_plugin_count"]
        [::std::mem::offset_of!(clap_plugin_factory, get_plugin_count) - 0usize];
    ["Offset of field: clap_plugin_factory::get_plugin_descriptor"]
        [::std::mem::offset_of!(clap_plugin_factory, get_plugin_descriptor) - 8usize];
    ["Offset of field: clap_plugin_factory::create_plugin"]
        [::std::mem::offset_of!(clap_plugin_factory, create_plugin) - 16usize];
};
pub type clap_plugin_factory_t = clap_plugin_factory;
pub type clap_timestamp = u64;
pub const CLAP_TIMESTAMP_UNKNOWN: clap_timestamp = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_universal_plugin_id {
    pub abi: *const ::std::os::raw::c_char,
    pub id: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_universal_plugin_id"]
        [::std::mem::size_of::<clap_universal_plugin_id>() - 16usize];
    ["Alignment of clap_universal_plugin_id"]
        [::std::mem::align_of::<clap_universal_plugin_id>() - 8usize];
    ["Offset of field: clap_universal_plugin_id::abi"]
        [::std::mem::offset_of!(clap_universal_plugin_id, abi) - 0usize];
    ["Offset of field: clap_universal_plugin_id::id"]
        [::std::mem::offset_of!(clap_universal_plugin_id, id) - 8usize];
};
pub type clap_universal_plugin_id_t = clap_universal_plugin_id;
pub const CLAP_PRESET_DISCOVERY_FACTORY_ID: &[u8; 32] = b"clap.preset-discovery-factory/2\0";
pub const CLAP_PRESET_DISCOVERY_FACTORY_ID_COMPAT: &[u8; 38] =
    b"clap.preset-discovery-factory/draft-2\0";
pub const clap_preset_discovery_location_kind_CLAP_PRESET_DISCOVERY_LOCATION_FILE:
    clap_preset_discovery_location_kind = 0;
pub const clap_preset_discovery_location_kind_CLAP_PRESET_DISCOVERY_LOCATION_PLUGIN:
    clap_preset_discovery_location_kind = 1;
pub type clap_preset_discovery_location_kind = ::std::os::raw::c_uint;
pub const clap_preset_discovery_flags_CLAP_PRESET_DISCOVERY_IS_FACTORY_CONTENT:
    clap_preset_discovery_flags = 1;
pub const clap_preset_discovery_flags_CLAP_PRESET_DISCOVERY_IS_USER_CONTENT:
    clap_preset_discovery_flags = 2;
pub const clap_preset_discovery_flags_CLAP_PRESET_DISCOVERY_IS_DEMO_CONTENT:
    clap_preset_discovery_flags = 4;
pub const clap_preset_discovery_flags_CLAP_PRESET_DISCOVERY_IS_FAVORITE:
    clap_preset_discovery_flags = 8;
pub type clap_preset_discovery_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_metadata_receiver {
    pub receiver_data: *mut ::std::os::raw::c_void,
    pub on_error: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            os_error: i32,
            error_message: *const ::std::os::raw::c_char,
        ),
    >,
    pub begin_preset: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            name: *const ::std::os::raw::c_char,
            load_key: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub add_plugin_id: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            plugin_id: *const clap_universal_plugin_id_t,
        ),
    >,
    pub set_soundpack_id: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            soundpack_id: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_flags: ::std::option::Option<
        unsafe extern "C" fn(receiver: *const clap_preset_discovery_metadata_receiver, flags: u32),
    >,
    pub add_creator: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            creator: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_description: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            description: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_timestamps: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            creation_time: clap_timestamp,
            modification_time: clap_timestamp,
        ),
    >,
    pub add_feature: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            feature: *const ::std::os::raw::c_char,
        ),
    >,
    pub add_extra_info: ::std::option::Option<
        unsafe extern "C" fn(
            receiver: *const clap_preset_discovery_metadata_receiver,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_metadata_receiver"]
        [::std::mem::size_of::<clap_preset_discovery_metadata_receiver>() - 88usize];
    ["Alignment of clap_preset_discovery_metadata_receiver"]
        [::std::mem::align_of::<clap_preset_discovery_metadata_receiver>() - 8usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::receiver_data"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, receiver_data) - 0usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::on_error"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, on_error) - 8usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::begin_preset"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, begin_preset) - 16usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::add_plugin_id"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, add_plugin_id) - 24usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::set_soundpack_id"][::std::mem::offset_of!(
        clap_preset_discovery_metadata_receiver,
        set_soundpack_id
    ) - 32usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::set_flags"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, set_flags) - 40usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::add_creator"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, add_creator) - 48usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::set_description"][::std::mem::offset_of!(
        clap_preset_discovery_metadata_receiver,
        set_description
    ) - 56usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::set_timestamps"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, set_timestamps) - 64usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::add_feature"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, add_feature) - 72usize];
    ["Offset of field: clap_preset_discovery_metadata_receiver::add_extra_info"]
        [::std::mem::offset_of!(clap_preset_discovery_metadata_receiver, add_extra_info) - 80usize];
};
pub type clap_preset_discovery_metadata_receiver_t = clap_preset_discovery_metadata_receiver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_filetype {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub file_extension: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_filetype"]
        [::std::mem::size_of::<clap_preset_discovery_filetype>() - 24usize];
    ["Alignment of clap_preset_discovery_filetype"]
        [::std::mem::align_of::<clap_preset_discovery_filetype>() - 8usize];
    ["Offset of field: clap_preset_discovery_filetype::name"]
        [::std::mem::offset_of!(clap_preset_discovery_filetype, name) - 0usize];
    ["Offset of field: clap_preset_discovery_filetype::description"]
        [::std::mem::offset_of!(clap_preset_discovery_filetype, description) - 8usize];
    ["Offset of field: clap_preset_discovery_filetype::file_extension"]
        [::std::mem::offset_of!(clap_preset_discovery_filetype, file_extension) - 16usize];
};
pub type clap_preset_discovery_filetype_t = clap_preset_discovery_filetype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_location {
    pub flags: u32,
    pub name: *const ::std::os::raw::c_char,
    pub kind: u32,
    pub location: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_location"]
        [::std::mem::size_of::<clap_preset_discovery_location>() - 32usize];
    ["Alignment of clap_preset_discovery_location"]
        [::std::mem::align_of::<clap_preset_discovery_location>() - 8usize];
    ["Offset of field: clap_preset_discovery_location::flags"]
        [::std::mem::offset_of!(clap_preset_discovery_location, flags) - 0usize];
    ["Offset of field: clap_preset_discovery_location::name"]
        [::std::mem::offset_of!(clap_preset_discovery_location, name) - 8usize];
    ["Offset of field: clap_preset_discovery_location::kind"]
        [::std::mem::offset_of!(clap_preset_discovery_location, kind) - 16usize];
    ["Offset of field: clap_preset_discovery_location::location"]
        [::std::mem::offset_of!(clap_preset_discovery_location, location) - 24usize];
};
pub type clap_preset_discovery_location_t = clap_preset_discovery_location;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_soundpack {
    pub flags: u32,
    pub id: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub homepage_url: *const ::std::os::raw::c_char,
    pub vendor: *const ::std::os::raw::c_char,
    pub image_path: *const ::std::os::raw::c_char,
    pub release_timestamp: clap_timestamp,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_soundpack"]
        [::std::mem::size_of::<clap_preset_discovery_soundpack>() - 64usize];
    ["Alignment of clap_preset_discovery_soundpack"]
        [::std::mem::align_of::<clap_preset_discovery_soundpack>() - 8usize];
    ["Offset of field: clap_preset_discovery_soundpack::flags"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, flags) - 0usize];
    ["Offset of field: clap_preset_discovery_soundpack::id"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, id) - 8usize];
    ["Offset of field: clap_preset_discovery_soundpack::name"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, name) - 16usize];
    ["Offset of field: clap_preset_discovery_soundpack::description"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, description) - 24usize];
    ["Offset of field: clap_preset_discovery_soundpack::homepage_url"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, homepage_url) - 32usize];
    ["Offset of field: clap_preset_discovery_soundpack::vendor"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, vendor) - 40usize];
    ["Offset of field: clap_preset_discovery_soundpack::image_path"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, image_path) - 48usize];
    ["Offset of field: clap_preset_discovery_soundpack::release_timestamp"]
        [::std::mem::offset_of!(clap_preset_discovery_soundpack, release_timestamp) - 56usize];
};
pub type clap_preset_discovery_soundpack_t = clap_preset_discovery_soundpack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_provider_descriptor {
    pub clap_version: clap_version_t,
    pub id: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub vendor: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_provider_descriptor"]
        [::std::mem::size_of::<clap_preset_discovery_provider_descriptor>() - 40usize];
    ["Alignment of clap_preset_discovery_provider_descriptor"]
        [::std::mem::align_of::<clap_preset_discovery_provider_descriptor>() - 8usize];
    ["Offset of field: clap_preset_discovery_provider_descriptor::clap_version"]
        [::std::mem::offset_of!(clap_preset_discovery_provider_descriptor, clap_version) - 0usize];
    ["Offset of field: clap_preset_discovery_provider_descriptor::id"]
        [::std::mem::offset_of!(clap_preset_discovery_provider_descriptor, id) - 16usize];
    ["Offset of field: clap_preset_discovery_provider_descriptor::name"]
        [::std::mem::offset_of!(clap_preset_discovery_provider_descriptor, name) - 24usize];
    ["Offset of field: clap_preset_discovery_provider_descriptor::vendor"]
        [::std::mem::offset_of!(clap_preset_discovery_provider_descriptor, vendor) - 32usize];
};
pub type clap_preset_discovery_provider_descriptor_t = clap_preset_discovery_provider_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_provider {
    pub desc: *const clap_preset_discovery_provider_descriptor_t,
    pub provider_data: *mut ::std::os::raw::c_void,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(provider: *const clap_preset_discovery_provider) -> bool,
    >,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(provider: *const clap_preset_discovery_provider),
    >,
    pub get_metadata: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *const clap_preset_discovery_provider,
            location_kind: u32,
            location: *const ::std::os::raw::c_char,
            metadata_receiver: *const clap_preset_discovery_metadata_receiver_t,
        ) -> bool,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *const clap_preset_discovery_provider,
            extension_id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_provider"]
        [::std::mem::size_of::<clap_preset_discovery_provider>() - 48usize];
    ["Alignment of clap_preset_discovery_provider"]
        [::std::mem::align_of::<clap_preset_discovery_provider>() - 8usize];
    ["Offset of field: clap_preset_discovery_provider::desc"]
        [::std::mem::offset_of!(clap_preset_discovery_provider, desc) - 0usize];
    ["Offset of field: clap_preset_discovery_provider::provider_data"]
        [::std::mem::offset_of!(clap_preset_discovery_provider, provider_data) - 8usize];
    ["Offset of field: clap_preset_discovery_provider::init"]
        [::std::mem::offset_of!(clap_preset_discovery_provider, init) - 16usize];
    ["Offset of field: clap_preset_discovery_provider::destroy"]
        [::std::mem::offset_of!(clap_preset_discovery_provider, destroy) - 24usize];
    ["Offset of field: clap_preset_discovery_provider::get_metadata"]
        [::std::mem::offset_of!(clap_preset_discovery_provider, get_metadata) - 32usize];
    ["Offset of field: clap_preset_discovery_provider::get_extension"]
        [::std::mem::offset_of!(clap_preset_discovery_provider, get_extension) - 40usize];
};
pub type clap_preset_discovery_provider_t = clap_preset_discovery_provider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_indexer {
    pub clap_version: clap_version_t,
    pub name: *const ::std::os::raw::c_char,
    pub vendor: *const ::std::os::raw::c_char,
    pub url: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub indexer_data: *mut ::std::os::raw::c_void,
    pub declare_filetype: ::std::option::Option<
        unsafe extern "C" fn(
            indexer: *const clap_preset_discovery_indexer,
            filetype: *const clap_preset_discovery_filetype_t,
        ) -> bool,
    >,
    pub declare_location: ::std::option::Option<
        unsafe extern "C" fn(
            indexer: *const clap_preset_discovery_indexer,
            location: *const clap_preset_discovery_location_t,
        ) -> bool,
    >,
    pub declare_soundpack: ::std::option::Option<
        unsafe extern "C" fn(
            indexer: *const clap_preset_discovery_indexer,
            soundpack: *const clap_preset_discovery_soundpack_t,
        ) -> bool,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            indexer: *const clap_preset_discovery_indexer,
            extension_id: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_indexer"]
        [::std::mem::size_of::<clap_preset_discovery_indexer>() - 88usize];
    ["Alignment of clap_preset_discovery_indexer"]
        [::std::mem::align_of::<clap_preset_discovery_indexer>() - 8usize];
    ["Offset of field: clap_preset_discovery_indexer::clap_version"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, clap_version) - 0usize];
    ["Offset of field: clap_preset_discovery_indexer::name"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, name) - 16usize];
    ["Offset of field: clap_preset_discovery_indexer::vendor"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, vendor) - 24usize];
    ["Offset of field: clap_preset_discovery_indexer::url"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, url) - 32usize];
    ["Offset of field: clap_preset_discovery_indexer::version"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, version) - 40usize];
    ["Offset of field: clap_preset_discovery_indexer::indexer_data"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, indexer_data) - 48usize];
    ["Offset of field: clap_preset_discovery_indexer::declare_filetype"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, declare_filetype) - 56usize];
    ["Offset of field: clap_preset_discovery_indexer::declare_location"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, declare_location) - 64usize];
    ["Offset of field: clap_preset_discovery_indexer::declare_soundpack"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, declare_soundpack) - 72usize];
    ["Offset of field: clap_preset_discovery_indexer::get_extension"]
        [::std::mem::offset_of!(clap_preset_discovery_indexer, get_extension) - 80usize];
};
pub type clap_preset_discovery_indexer_t = clap_preset_discovery_indexer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_preset_discovery_factory {
    pub count: ::std::option::Option<
        unsafe extern "C" fn(factory: *const clap_preset_discovery_factory) -> u32,
    >,
    pub get_descriptor: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *const clap_preset_discovery_factory,
            index: u32,
        ) -> *const clap_preset_discovery_provider_descriptor_t,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            factory: *const clap_preset_discovery_factory,
            indexer: *const clap_preset_discovery_indexer_t,
            provider_id: *const ::std::os::raw::c_char,
        ) -> *const clap_preset_discovery_provider_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_preset_discovery_factory"]
        [::std::mem::size_of::<clap_preset_discovery_factory>() - 24usize];
    ["Alignment of clap_preset_discovery_factory"]
        [::std::mem::align_of::<clap_preset_discovery_factory>() - 8usize];
    ["Offset of field: clap_preset_discovery_factory::count"]
        [::std::mem::offset_of!(clap_preset_discovery_factory, count) - 0usize];
    ["Offset of field: clap_preset_discovery_factory::get_descriptor"]
        [::std::mem::offset_of!(clap_preset_discovery_factory, get_descriptor) - 8usize];
    ["Offset of field: clap_preset_discovery_factory::create"]
        [::std::mem::offset_of!(clap_preset_discovery_factory, create) - 16usize];
};
pub type clap_preset_discovery_factory_t = clap_preset_discovery_factory;
pub const CLAP_EXT_AMBISONIC: &[u8; 17] = b"clap.ambisonic/3\0";
pub const CLAP_EXT_AMBISONIC_COMPAT: &[u8; 23] = b"clap.ambisonic.draft/3\0";
pub const CLAP_PORT_AMBISONIC: &[u8; 10] = b"ambisonic\0";
pub const clap_ambisonic_ordering_CLAP_AMBISONIC_ORDERING_FUMA: clap_ambisonic_ordering = 0;
pub const clap_ambisonic_ordering_CLAP_AMBISONIC_ORDERING_ACN: clap_ambisonic_ordering = 1;
pub type clap_ambisonic_ordering = ::std::os::raw::c_uint;
pub const clap_ambisonic_normalization_CLAP_AMBISONIC_NORMALIZATION_MAXN:
    clap_ambisonic_normalization = 0;
pub const clap_ambisonic_normalization_CLAP_AMBISONIC_NORMALIZATION_SN3D:
    clap_ambisonic_normalization = 1;
pub const clap_ambisonic_normalization_CLAP_AMBISONIC_NORMALIZATION_N3D:
    clap_ambisonic_normalization = 2;
pub const clap_ambisonic_normalization_CLAP_AMBISONIC_NORMALIZATION_SN2D:
    clap_ambisonic_normalization = 3;
pub const clap_ambisonic_normalization_CLAP_AMBISONIC_NORMALIZATION_N2D:
    clap_ambisonic_normalization = 4;
pub type clap_ambisonic_normalization = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_ambisonic_config {
    pub ordering: u32,
    pub normalization: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_ambisonic_config"][::std::mem::size_of::<clap_ambisonic_config>() - 8usize];
    ["Alignment of clap_ambisonic_config"]
        [::std::mem::align_of::<clap_ambisonic_config>() - 4usize];
    ["Offset of field: clap_ambisonic_config::ordering"]
        [::std::mem::offset_of!(clap_ambisonic_config, ordering) - 0usize];
    ["Offset of field: clap_ambisonic_config::normalization"]
        [::std::mem::offset_of!(clap_ambisonic_config, normalization) - 4usize];
};
pub type clap_ambisonic_config_t = clap_ambisonic_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_ambisonic {
    pub is_config_supported: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            config: *const clap_ambisonic_config_t,
        ) -> bool,
    >,
    pub get_config: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            is_input: bool,
            port_index: u32,
            config: *mut clap_ambisonic_config_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_ambisonic"][::std::mem::size_of::<clap_plugin_ambisonic>() - 16usize];
    ["Alignment of clap_plugin_ambisonic"]
        [::std::mem::align_of::<clap_plugin_ambisonic>() - 8usize];
    ["Offset of field: clap_plugin_ambisonic::is_config_supported"]
        [::std::mem::offset_of!(clap_plugin_ambisonic, is_config_supported) - 0usize];
    ["Offset of field: clap_plugin_ambisonic::get_config"]
        [::std::mem::offset_of!(clap_plugin_ambisonic, get_config) - 8usize];
};
pub type clap_plugin_ambisonic_t = clap_plugin_ambisonic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_ambisonic {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_ambisonic"][::std::mem::size_of::<clap_host_ambisonic>() - 8usize];
    ["Alignment of clap_host_ambisonic"][::std::mem::align_of::<clap_host_ambisonic>() - 8usize];
    ["Offset of field: clap_host_ambisonic::changed"]
        [::std::mem::offset_of!(clap_host_ambisonic, changed) - 0usize];
};
pub type clap_host_ambisonic_t = clap_host_ambisonic;
#[doc = " @page Audio Ports Activation\n\n This extension provides a way for the host to activate and de-activate audio ports.\n Deactivating a port provides the following benefits:\n - the plugin knows ahead of time that a given input is not present and can choose\n   an optimized computation path,\n - the plugin knows that an output is not consumed by the host, and doesn't need to\n   compute it.\n\n Audio ports can only be activated or deactivated when the plugin is deactivated, unless\n can_activate_while_processing() returns true.\n\n Audio buffers must still be provided if the audio port is deactivated.\n In such case, they shall be filled with 0 (or whatever is the neutral value in your context)\n and the constant_mask shall be set.\n\n Audio ports are initially in the active state after creating the plugin instance.\n Audio ports state are not saved in the plugin state, so the host must restore the\n audio ports state after creating the plugin instance.\n\n Audio ports state is invalidated by clap_plugin_audio_ports_config.select() and\n clap_host_audio_ports.rescan(CLAP_AUDIO_PORTS_RESCAN_LIST)."]
pub const CLAP_EXT_AUDIO_PORTS_ACTIVATION: &[u8; 30] = b"clap.audio-ports-activation/2\0";
pub const CLAP_EXT_AUDIO_PORTS_ACTIVATION_COMPAT: &[u8; 36] =
    b"clap.audio-ports-activation/draft-2\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_audio_ports_activation {
    pub can_activate_while_processing:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub set_active: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            is_input: bool,
            port_index: u32,
            is_active: bool,
            sample_size: u32,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_audio_ports_activation"]
        [::std::mem::size_of::<clap_plugin_audio_ports_activation>() - 16usize];
    ["Alignment of clap_plugin_audio_ports_activation"]
        [::std::mem::align_of::<clap_plugin_audio_ports_activation>() - 8usize];
    ["Offset of field: clap_plugin_audio_ports_activation::can_activate_while_processing"][::std::mem::offset_of!(
        clap_plugin_audio_ports_activation,
        can_activate_while_processing
    )
        - 0usize];
    ["Offset of field: clap_plugin_audio_ports_activation::set_active"]
        [::std::mem::offset_of!(clap_plugin_audio_ports_activation, set_active) - 8usize];
};
pub type clap_plugin_audio_ports_activation_t = clap_plugin_audio_ports_activation;
pub const CLAP_NAME_SIZE: _bindgen_ty_4 = 256;
pub const CLAP_PATH_SIZE: _bindgen_ty_4 = 1024;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[doc = " @page Audio Ports\n\n This extension provides a way for the plugin to describe its current audio ports.\n\n If the plugin does not implement this extension, it won't have audio ports.\n\n 32 bits support is required for both host and plugins. 64 bits audio is optional.\n\n The plugin is only allowed to change its ports configuration while it is deactivated."]
pub const CLAP_EXT_AUDIO_PORTS: &[u8; 17] = b"clap.audio-ports\0";
pub const CLAP_PORT_MONO: &[u8; 5] = b"mono\0";
pub const CLAP_PORT_STEREO: &[u8; 7] = b"stereo\0";
pub const CLAP_AUDIO_PORT_IS_MAIN: _bindgen_ty_5 = 1;
pub const CLAP_AUDIO_PORT_SUPPORTS_64BITS: _bindgen_ty_5 = 2;
pub const CLAP_AUDIO_PORT_PREFERS_64BITS: _bindgen_ty_5 = 4;
pub const CLAP_AUDIO_PORT_REQUIRES_COMMON_SAMPLE_SIZE: _bindgen_ty_5 = 8;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_audio_port_info {
    pub id: clap_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub flags: u32,
    pub channel_count: u32,
    pub port_type: *const ::std::os::raw::c_char,
    pub in_place_pair: clap_id,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_audio_port_info"][::std::mem::size_of::<clap_audio_port_info>() - 288usize];
    ["Alignment of clap_audio_port_info"][::std::mem::align_of::<clap_audio_port_info>() - 8usize];
    ["Offset of field: clap_audio_port_info::id"]
        [::std::mem::offset_of!(clap_audio_port_info, id) - 0usize];
    ["Offset of field: clap_audio_port_info::name"]
        [::std::mem::offset_of!(clap_audio_port_info, name) - 4usize];
    ["Offset of field: clap_audio_port_info::flags"]
        [::std::mem::offset_of!(clap_audio_port_info, flags) - 260usize];
    ["Offset of field: clap_audio_port_info::channel_count"]
        [::std::mem::offset_of!(clap_audio_port_info, channel_count) - 264usize];
    ["Offset of field: clap_audio_port_info::port_type"]
        [::std::mem::offset_of!(clap_audio_port_info, port_type) - 272usize];
    ["Offset of field: clap_audio_port_info::in_place_pair"]
        [::std::mem::offset_of!(clap_audio_port_info, in_place_pair) - 280usize];
};
pub type clap_audio_port_info_t = clap_audio_port_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_audio_ports {
    pub count: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, is_input: bool) -> u32,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            is_input: bool,
            info: *mut clap_audio_port_info_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_audio_ports"][::std::mem::size_of::<clap_plugin_audio_ports>() - 16usize];
    ["Alignment of clap_plugin_audio_ports"]
        [::std::mem::align_of::<clap_plugin_audio_ports>() - 8usize];
    ["Offset of field: clap_plugin_audio_ports::count"]
        [::std::mem::offset_of!(clap_plugin_audio_ports, count) - 0usize];
    ["Offset of field: clap_plugin_audio_ports::get"]
        [::std::mem::offset_of!(clap_plugin_audio_ports, get) - 8usize];
};
pub type clap_plugin_audio_ports_t = clap_plugin_audio_ports;
pub const CLAP_AUDIO_PORTS_RESCAN_NAMES: _bindgen_ty_6 = 1;
pub const CLAP_AUDIO_PORTS_RESCAN_FLAGS: _bindgen_ty_6 = 2;
pub const CLAP_AUDIO_PORTS_RESCAN_CHANNEL_COUNT: _bindgen_ty_6 = 4;
pub const CLAP_AUDIO_PORTS_RESCAN_PORT_TYPE: _bindgen_ty_6 = 8;
pub const CLAP_AUDIO_PORTS_RESCAN_IN_PLACE_PAIR: _bindgen_ty_6 = 16;
pub const CLAP_AUDIO_PORTS_RESCAN_LIST: _bindgen_ty_6 = 32;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_audio_ports {
    pub is_rescan_flag_supported:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, flag: u32) -> bool>,
    pub rescan: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, flags: u32)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_audio_ports"][::std::mem::size_of::<clap_host_audio_ports>() - 16usize];
    ["Alignment of clap_host_audio_ports"]
        [::std::mem::align_of::<clap_host_audio_ports>() - 8usize];
    ["Offset of field: clap_host_audio_ports::is_rescan_flag_supported"]
        [::std::mem::offset_of!(clap_host_audio_ports, is_rescan_flag_supported) - 0usize];
    ["Offset of field: clap_host_audio_ports::rescan"]
        [::std::mem::offset_of!(clap_host_audio_ports, rescan) - 8usize];
};
pub type clap_host_audio_ports_t = clap_host_audio_ports;
#[doc = " @page Audio Ports Config\n\n This extension let the plugin provide port configurations presets.\n For example mono, stereo, surround, ambisonic, ...\n\n After the plugin initialization, the host may scan the list of configurations and eventually\n select one that fits the plugin context. The host can only select a configuration if the plugin\n is deactivated.\n\n A configuration is a very simple description of the audio ports:\n - it describes the main input and output ports\n - it has a name that can be displayed to the user\n\n The idea behind the configurations, is to let the user choose one via a menu.\n\n Plugins with very complex configuration possibilities should let the user configure the ports\n from the plugin GUI, and call @ref clap_host_audio_ports.rescan(CLAP_AUDIO_PORTS_RESCAN_ALL).\n\n To inquire the exact bus layout, the plugin implements the clap_plugin_audio_ports_config_info_t\n extension where all busses can be retrieved in the same way as in the audio-port extension."]
pub const CLAP_EXT_AUDIO_PORTS_CONFIG: &[u8; 24] = b"clap.audio-ports-config\0";
pub const CLAP_EXT_AUDIO_PORTS_CONFIG_INFO: &[u8; 31] = b"clap.audio-ports-config-info/1\0";
pub const CLAP_EXT_AUDIO_PORTS_CONFIG_INFO_COMPAT: &[u8; 37] =
    b"clap.audio-ports-config-info/draft-0\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_audio_ports_config {
    pub id: clap_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub input_port_count: u32,
    pub output_port_count: u32,
    pub has_main_input: bool,
    pub main_input_channel_count: u32,
    pub main_input_port_type: *const ::std::os::raw::c_char,
    pub has_main_output: bool,
    pub main_output_channel_count: u32,
    pub main_output_port_type: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_audio_ports_config"]
        [::std::mem::size_of::<clap_audio_ports_config>() - 304usize];
    ["Alignment of clap_audio_ports_config"]
        [::std::mem::align_of::<clap_audio_ports_config>() - 8usize];
    ["Offset of field: clap_audio_ports_config::id"]
        [::std::mem::offset_of!(clap_audio_ports_config, id) - 0usize];
    ["Offset of field: clap_audio_ports_config::name"]
        [::std::mem::offset_of!(clap_audio_ports_config, name) - 4usize];
    ["Offset of field: clap_audio_ports_config::input_port_count"]
        [::std::mem::offset_of!(clap_audio_ports_config, input_port_count) - 260usize];
    ["Offset of field: clap_audio_ports_config::output_port_count"]
        [::std::mem::offset_of!(clap_audio_ports_config, output_port_count) - 264usize];
    ["Offset of field: clap_audio_ports_config::has_main_input"]
        [::std::mem::offset_of!(clap_audio_ports_config, has_main_input) - 268usize];
    ["Offset of field: clap_audio_ports_config::main_input_channel_count"]
        [::std::mem::offset_of!(clap_audio_ports_config, main_input_channel_count) - 272usize];
    ["Offset of field: clap_audio_ports_config::main_input_port_type"]
        [::std::mem::offset_of!(clap_audio_ports_config, main_input_port_type) - 280usize];
    ["Offset of field: clap_audio_ports_config::has_main_output"]
        [::std::mem::offset_of!(clap_audio_ports_config, has_main_output) - 288usize];
    ["Offset of field: clap_audio_ports_config::main_output_channel_count"]
        [::std::mem::offset_of!(clap_audio_ports_config, main_output_channel_count) - 292usize];
    ["Offset of field: clap_audio_ports_config::main_output_port_type"]
        [::std::mem::offset_of!(clap_audio_ports_config, main_output_port_type) - 296usize];
};
pub type clap_audio_ports_config_t = clap_audio_ports_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_audio_ports_config {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            config: *mut clap_audio_ports_config_t,
        ) -> bool,
    >,
    pub select: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, config_id: clap_id) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_audio_ports_config"]
        [::std::mem::size_of::<clap_plugin_audio_ports_config>() - 24usize];
    ["Alignment of clap_plugin_audio_ports_config"]
        [::std::mem::align_of::<clap_plugin_audio_ports_config>() - 8usize];
    ["Offset of field: clap_plugin_audio_ports_config::count"]
        [::std::mem::offset_of!(clap_plugin_audio_ports_config, count) - 0usize];
    ["Offset of field: clap_plugin_audio_ports_config::get"]
        [::std::mem::offset_of!(clap_plugin_audio_ports_config, get) - 8usize];
    ["Offset of field: clap_plugin_audio_ports_config::select"]
        [::std::mem::offset_of!(clap_plugin_audio_ports_config, select) - 16usize];
};
pub type clap_plugin_audio_ports_config_t = clap_plugin_audio_ports_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_audio_ports_config_info {
    pub current_config:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> clap_id>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            config_id: clap_id,
            port_index: u32,
            is_input: bool,
            info: *mut clap_audio_port_info_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_audio_ports_config_info"]
        [::std::mem::size_of::<clap_plugin_audio_ports_config_info>() - 16usize];
    ["Alignment of clap_plugin_audio_ports_config_info"]
        [::std::mem::align_of::<clap_plugin_audio_ports_config_info>() - 8usize];
    ["Offset of field: clap_plugin_audio_ports_config_info::current_config"]
        [::std::mem::offset_of!(clap_plugin_audio_ports_config_info, current_config) - 0usize];
    ["Offset of field: clap_plugin_audio_ports_config_info::get"]
        [::std::mem::offset_of!(clap_plugin_audio_ports_config_info, get) - 8usize];
};
pub type clap_plugin_audio_ports_config_info_t = clap_plugin_audio_ports_config_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_audio_ports_config {
    pub rescan: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_audio_ports_config"]
        [::std::mem::size_of::<clap_host_audio_ports_config>() - 8usize];
    ["Alignment of clap_host_audio_ports_config"]
        [::std::mem::align_of::<clap_host_audio_ports_config>() - 8usize];
    ["Offset of field: clap_host_audio_ports_config::rescan"]
        [::std::mem::offset_of!(clap_host_audio_ports_config, rescan) - 0usize];
};
pub type clap_host_audio_ports_config_t = clap_host_audio_ports_config;
pub const CLAP_EXT_CONFIGURABLE_AUDIO_PORTS: &[u8; 32] = b"clap.configurable-audio-ports/1\0";
pub const CLAP_EXT_CONFIGURABLE_AUDIO_PORTS_COMPAT: &[u8; 37] =
    b"clap.configurable-audio-ports.draft1\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_audio_port_configuration_request {
    pub is_input: bool,
    pub port_index: u32,
    pub channel_count: u32,
    pub port_type: *const ::std::os::raw::c_char,
    pub port_details: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_audio_port_configuration_request"]
        [::std::mem::size_of::<clap_audio_port_configuration_request>() - 32usize];
    ["Alignment of clap_audio_port_configuration_request"]
        [::std::mem::align_of::<clap_audio_port_configuration_request>() - 8usize];
    ["Offset of field: clap_audio_port_configuration_request::is_input"]
        [::std::mem::offset_of!(clap_audio_port_configuration_request, is_input) - 0usize];
    ["Offset of field: clap_audio_port_configuration_request::port_index"]
        [::std::mem::offset_of!(clap_audio_port_configuration_request, port_index) - 4usize];
    ["Offset of field: clap_audio_port_configuration_request::channel_count"]
        [::std::mem::offset_of!(clap_audio_port_configuration_request, channel_count) - 8usize];
    ["Offset of field: clap_audio_port_configuration_request::port_type"]
        [::std::mem::offset_of!(clap_audio_port_configuration_request, port_type) - 16usize];
    ["Offset of field: clap_audio_port_configuration_request::port_details"]
        [::std::mem::offset_of!(clap_audio_port_configuration_request, port_details) - 24usize];
};
pub type clap_audio_port_configuration_request_t = clap_audio_port_configuration_request;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_configurable_audio_ports {
    pub can_apply_configuration: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            requests: *const clap_audio_port_configuration_request,
            request_count: u32,
        ) -> bool,
    >,
    pub apply_configuration: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            requests: *const clap_audio_port_configuration_request,
            request_count: u32,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_configurable_audio_ports"]
        [::std::mem::size_of::<clap_plugin_configurable_audio_ports>() - 16usize];
    ["Alignment of clap_plugin_configurable_audio_ports"]
        [::std::mem::align_of::<clap_plugin_configurable_audio_ports>() - 8usize];
    ["Offset of field: clap_plugin_configurable_audio_ports::can_apply_configuration"][::std::mem::offset_of!(
        clap_plugin_configurable_audio_ports,
        can_apply_configuration
    ) - 0usize];
    ["Offset of field: clap_plugin_configurable_audio_ports::apply_configuration"][::std::mem::offset_of!(
        clap_plugin_configurable_audio_ports,
        apply_configuration
    ) - 8usize];
};
pub type clap_plugin_configurable_audio_ports_t = clap_plugin_configurable_audio_ports;
pub const CLAP_EXT_CONTEXT_MENU: &[u8; 20] = b"clap.context-menu/1\0";
pub const CLAP_EXT_CONTEXT_MENU_COMPAT: &[u8; 26] = b"clap.context-menu.draft/0\0";
pub const CLAP_CONTEXT_MENU_TARGET_KIND_GLOBAL: _bindgen_ty_7 = 0;
pub const CLAP_CONTEXT_MENU_TARGET_KIND_PARAM: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_target {
    pub kind: u32,
    pub id: clap_id,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_context_menu_target"]
        [::std::mem::size_of::<clap_context_menu_target>() - 8usize];
    ["Alignment of clap_context_menu_target"]
        [::std::mem::align_of::<clap_context_menu_target>() - 4usize];
    ["Offset of field: clap_context_menu_target::kind"]
        [::std::mem::offset_of!(clap_context_menu_target, kind) - 0usize];
    ["Offset of field: clap_context_menu_target::id"]
        [::std::mem::offset_of!(clap_context_menu_target, id) - 4usize];
};
pub type clap_context_menu_target_t = clap_context_menu_target;
pub const CLAP_CONTEXT_MENU_ITEM_ENTRY: _bindgen_ty_8 = 0;
pub const CLAP_CONTEXT_MENU_ITEM_CHECK_ENTRY: _bindgen_ty_8 = 1;
pub const CLAP_CONTEXT_MENU_ITEM_SEPARATOR: _bindgen_ty_8 = 2;
pub const CLAP_CONTEXT_MENU_ITEM_BEGIN_SUBMENU: _bindgen_ty_8 = 3;
pub const CLAP_CONTEXT_MENU_ITEM_END_SUBMENU: _bindgen_ty_8 = 4;
pub const CLAP_CONTEXT_MENU_ITEM_TITLE: _bindgen_ty_8 = 5;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub type clap_context_menu_item_kind_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_entry {
    pub label: *const ::std::os::raw::c_char,
    pub is_enabled: bool,
    pub action_id: clap_id,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_context_menu_entry"][::std::mem::size_of::<clap_context_menu_entry>() - 16usize];
    ["Alignment of clap_context_menu_entry"]
        [::std::mem::align_of::<clap_context_menu_entry>() - 8usize];
    ["Offset of field: clap_context_menu_entry::label"]
        [::std::mem::offset_of!(clap_context_menu_entry, label) - 0usize];
    ["Offset of field: clap_context_menu_entry::is_enabled"]
        [::std::mem::offset_of!(clap_context_menu_entry, is_enabled) - 8usize];
    ["Offset of field: clap_context_menu_entry::action_id"]
        [::std::mem::offset_of!(clap_context_menu_entry, action_id) - 12usize];
};
pub type clap_context_menu_entry_t = clap_context_menu_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_check_entry {
    pub label: *const ::std::os::raw::c_char,
    pub is_enabled: bool,
    pub is_checked: bool,
    pub action_id: clap_id,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_context_menu_check_entry"]
        [::std::mem::size_of::<clap_context_menu_check_entry>() - 16usize];
    ["Alignment of clap_context_menu_check_entry"]
        [::std::mem::align_of::<clap_context_menu_check_entry>() - 8usize];
    ["Offset of field: clap_context_menu_check_entry::label"]
        [::std::mem::offset_of!(clap_context_menu_check_entry, label) - 0usize];
    ["Offset of field: clap_context_menu_check_entry::is_enabled"]
        [::std::mem::offset_of!(clap_context_menu_check_entry, is_enabled) - 8usize];
    ["Offset of field: clap_context_menu_check_entry::is_checked"]
        [::std::mem::offset_of!(clap_context_menu_check_entry, is_checked) - 9usize];
    ["Offset of field: clap_context_menu_check_entry::action_id"]
        [::std::mem::offset_of!(clap_context_menu_check_entry, action_id) - 12usize];
};
pub type clap_context_menu_check_entry_t = clap_context_menu_check_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_item_title {
    pub title: *const ::std::os::raw::c_char,
    pub is_enabled: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_context_menu_item_title"]
        [::std::mem::size_of::<clap_context_menu_item_title>() - 16usize];
    ["Alignment of clap_context_menu_item_title"]
        [::std::mem::align_of::<clap_context_menu_item_title>() - 8usize];
    ["Offset of field: clap_context_menu_item_title::title"]
        [::std::mem::offset_of!(clap_context_menu_item_title, title) - 0usize];
    ["Offset of field: clap_context_menu_item_title::is_enabled"]
        [::std::mem::offset_of!(clap_context_menu_item_title, is_enabled) - 8usize];
};
pub type clap_context_menu_item_title_t = clap_context_menu_item_title;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_submenu {
    pub label: *const ::std::os::raw::c_char,
    pub is_enabled: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_context_menu_submenu"]
        [::std::mem::size_of::<clap_context_menu_submenu>() - 16usize];
    ["Alignment of clap_context_menu_submenu"]
        [::std::mem::align_of::<clap_context_menu_submenu>() - 8usize];
    ["Offset of field: clap_context_menu_submenu::label"]
        [::std::mem::offset_of!(clap_context_menu_submenu, label) - 0usize];
    ["Offset of field: clap_context_menu_submenu::is_enabled"]
        [::std::mem::offset_of!(clap_context_menu_submenu, is_enabled) - 8usize];
};
pub type clap_context_menu_submenu_t = clap_context_menu_submenu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_context_menu_builder {
    pub ctx: *mut ::std::os::raw::c_void,
    pub add_item: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *const clap_context_menu_builder,
            item_kind: clap_context_menu_item_kind_t,
            item_data: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub supports: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *const clap_context_menu_builder,
            item_kind: clap_context_menu_item_kind_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_context_menu_builder"]
        [::std::mem::size_of::<clap_context_menu_builder>() - 24usize];
    ["Alignment of clap_context_menu_builder"]
        [::std::mem::align_of::<clap_context_menu_builder>() - 8usize];
    ["Offset of field: clap_context_menu_builder::ctx"]
        [::std::mem::offset_of!(clap_context_menu_builder, ctx) - 0usize];
    ["Offset of field: clap_context_menu_builder::add_item"]
        [::std::mem::offset_of!(clap_context_menu_builder, add_item) - 8usize];
    ["Offset of field: clap_context_menu_builder::supports"]
        [::std::mem::offset_of!(clap_context_menu_builder, supports) - 16usize];
};
pub type clap_context_menu_builder_t = clap_context_menu_builder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_context_menu {
    pub populate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            target: *const clap_context_menu_target_t,
            builder: *const clap_context_menu_builder_t,
        ) -> bool,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            target: *const clap_context_menu_target_t,
            action_id: clap_id,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_context_menu"]
        [::std::mem::size_of::<clap_plugin_context_menu>() - 16usize];
    ["Alignment of clap_plugin_context_menu"]
        [::std::mem::align_of::<clap_plugin_context_menu>() - 8usize];
    ["Offset of field: clap_plugin_context_menu::populate"]
        [::std::mem::offset_of!(clap_plugin_context_menu, populate) - 0usize];
    ["Offset of field: clap_plugin_context_menu::perform"]
        [::std::mem::offset_of!(clap_plugin_context_menu, perform) - 8usize];
};
pub type clap_plugin_context_menu_t = clap_plugin_context_menu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_context_menu {
    pub populate: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            target: *const clap_context_menu_target_t,
            builder: *const clap_context_menu_builder_t,
        ) -> bool,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            target: *const clap_context_menu_target_t,
            action_id: clap_id,
        ) -> bool,
    >,
    pub can_popup: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub popup: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            target: *const clap_context_menu_target_t,
            screen_index: i32,
            x: i32,
            y: i32,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_context_menu"][::std::mem::size_of::<clap_host_context_menu>() - 32usize];
    ["Alignment of clap_host_context_menu"]
        [::std::mem::align_of::<clap_host_context_menu>() - 8usize];
    ["Offset of field: clap_host_context_menu::populate"]
        [::std::mem::offset_of!(clap_host_context_menu, populate) - 0usize];
    ["Offset of field: clap_host_context_menu::perform"]
        [::std::mem::offset_of!(clap_host_context_menu, perform) - 8usize];
    ["Offset of field: clap_host_context_menu::can_popup"]
        [::std::mem::offset_of!(clap_host_context_menu, can_popup) - 16usize];
    ["Offset of field: clap_host_context_menu::popup"]
        [::std::mem::offset_of!(clap_host_context_menu, popup) - 24usize];
};
pub type clap_host_context_menu_t = clap_host_context_menu;
pub const CLAP_EXT_EVENT_REGISTRY: &[u8; 20] = b"clap.event-registry\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_event_registry {
    pub query: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            space_name: *const ::std::os::raw::c_char,
            space_id: *mut u16,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_event_registry"]
        [::std::mem::size_of::<clap_host_event_registry>() - 8usize];
    ["Alignment of clap_host_event_registry"]
        [::std::mem::align_of::<clap_host_event_registry>() - 8usize];
    ["Offset of field: clap_host_event_registry::query"]
        [::std::mem::offset_of!(clap_host_event_registry, query) - 0usize];
};
pub type clap_host_event_registry_t = clap_host_event_registry;
#[doc = " @page GUI\n\n This extension defines how the plugin will present its GUI.\n\n There are two approaches:\n 1. the plugin creates a window and embeds it into the host's window\n 2. the plugin creates a floating window\n\n Embedding the window gives more control to the host, and feels more integrated.\n Floating window are sometimes the only option due to technical limitations.\n\n The Embedding protocol is by far the most common, supported by all hosts to date,\n and a plugin author should support at least that case.\n\n Showing the GUI works as follow:\n  1. clap_plugin_gui->is_api_supported(), check what can work\n  2. clap_plugin_gui->create(), allocates gui resources\n  3. if the plugin window is floating\n  4.    -> clap_plugin_gui->set_transient()\n  5.    -> clap_plugin_gui->suggest_title()\n  6. else\n  7.    -> clap_plugin_gui->set_scale()\n  8.    -> clap_plugin_gui->can_resize()\n  9.    -> if resizable and has known size from previous session, clap_plugin_gui->set_size()\n 10.    -> else clap_plugin_gui->get_size(), gets initial size\n 11.    -> clap_plugin_gui->set_parent()\n 12. clap_plugin_gui->show()\n 13. clap_plugin_gui->hide()/show() ...\n 14. clap_plugin_gui->destroy() when done with the gui\n\n Resizing the window (initiated by the plugin, if embedded):\n 1. Plugins calls clap_host_gui->request_resize()\n 2. If the host returns true the new size is accepted,\n    the host doesn't have to call clap_plugin_gui->set_size().\n    If the host returns false, the new size is rejected.\n\n Resizing the window (drag, if embedded)):\n 1. Only possible if clap_plugin_gui->can_resize() returns true\n 2. Mouse drag -> new_size\n 3. clap_plugin_gui->adjust_size(new_size) -> working_size\n 4. clap_plugin_gui->set_size(working_size)"]
pub const CLAP_EXT_GUI: &[u8; 9] = b"clap.gui\0";
pub const CLAP_WINDOW_API_WIN32: &[u8; 6] = b"win32\0";
pub const CLAP_WINDOW_API_COCOA: &[u8; 6] = b"cocoa\0";
pub const CLAP_WINDOW_API_X11: &[u8; 4] = b"x11\0";
pub const CLAP_WINDOW_API_WAYLAND: &[u8; 8] = b"wayland\0";
pub type clap_hwnd = *mut ::std::os::raw::c_void;
pub type clap_nsview = *mut ::std::os::raw::c_void;
pub type clap_xwnd = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clap_window {
    pub api: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: clap_window__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union clap_window__bindgen_ty_1 {
    pub cocoa: clap_nsview,
    pub x11: clap_xwnd,
    pub win32: clap_hwnd,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_window__bindgen_ty_1"]
        [::std::mem::size_of::<clap_window__bindgen_ty_1>() - 8usize];
    ["Alignment of clap_window__bindgen_ty_1"]
        [::std::mem::align_of::<clap_window__bindgen_ty_1>() - 8usize];
    ["Offset of field: clap_window__bindgen_ty_1::cocoa"]
        [::std::mem::offset_of!(clap_window__bindgen_ty_1, cocoa) - 0usize];
    ["Offset of field: clap_window__bindgen_ty_1::x11"]
        [::std::mem::offset_of!(clap_window__bindgen_ty_1, x11) - 0usize];
    ["Offset of field: clap_window__bindgen_ty_1::win32"]
        [::std::mem::offset_of!(clap_window__bindgen_ty_1, win32) - 0usize];
    ["Offset of field: clap_window__bindgen_ty_1::ptr"]
        [::std::mem::offset_of!(clap_window__bindgen_ty_1, ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_window"][::std::mem::size_of::<clap_window>() - 16usize];
    ["Alignment of clap_window"][::std::mem::align_of::<clap_window>() - 8usize];
    ["Offset of field: clap_window::api"][::std::mem::offset_of!(clap_window, api) - 0usize];
};
pub type clap_window_t = clap_window;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_gui_resize_hints {
    pub can_resize_horizontally: bool,
    pub can_resize_vertically: bool,
    pub preserve_aspect_ratio: bool,
    pub aspect_ratio_width: u32,
    pub aspect_ratio_height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_gui_resize_hints"][::std::mem::size_of::<clap_gui_resize_hints>() - 12usize];
    ["Alignment of clap_gui_resize_hints"]
        [::std::mem::align_of::<clap_gui_resize_hints>() - 4usize];
    ["Offset of field: clap_gui_resize_hints::can_resize_horizontally"]
        [::std::mem::offset_of!(clap_gui_resize_hints, can_resize_horizontally) - 0usize];
    ["Offset of field: clap_gui_resize_hints::can_resize_vertically"]
        [::std::mem::offset_of!(clap_gui_resize_hints, can_resize_vertically) - 1usize];
    ["Offset of field: clap_gui_resize_hints::preserve_aspect_ratio"]
        [::std::mem::offset_of!(clap_gui_resize_hints, preserve_aspect_ratio) - 2usize];
    ["Offset of field: clap_gui_resize_hints::aspect_ratio_width"]
        [::std::mem::offset_of!(clap_gui_resize_hints, aspect_ratio_width) - 4usize];
    ["Offset of field: clap_gui_resize_hints::aspect_ratio_height"]
        [::std::mem::offset_of!(clap_gui_resize_hints, aspect_ratio_height) - 8usize];
};
pub type clap_gui_resize_hints_t = clap_gui_resize_hints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_gui {
    pub is_api_supported: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            api: *const ::std::os::raw::c_char,
            is_floating: bool,
        ) -> bool,
    >,
    pub get_preferred_api: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            api: *mut *const ::std::os::raw::c_char,
            is_floating: *mut bool,
        ) -> bool,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            api: *const ::std::os::raw::c_char,
            is_floating: bool,
        ) -> bool,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t)>,
    pub set_scale: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, scale: f64) -> bool,
    >,
    pub get_size: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            width: *mut u32,
            height: *mut u32,
        ) -> bool,
    >,
    pub can_resize:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub get_resize_hints: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            hints: *mut clap_gui_resize_hints_t,
        ) -> bool,
    >,
    pub adjust_size: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            width: *mut u32,
            height: *mut u32,
        ) -> bool,
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, width: u32, height: u32) -> bool,
    >,
    pub set_parent: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, window: *const clap_window_t) -> bool,
    >,
    pub set_transient: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, window: *const clap_window_t) -> bool,
    >,
    pub suggest_title: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, title: *const ::std::os::raw::c_char),
    >,
    pub show: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub hide: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_gui"][::std::mem::size_of::<clap_plugin_gui>() - 120usize];
    ["Alignment of clap_plugin_gui"][::std::mem::align_of::<clap_plugin_gui>() - 8usize];
    ["Offset of field: clap_plugin_gui::is_api_supported"]
        [::std::mem::offset_of!(clap_plugin_gui, is_api_supported) - 0usize];
    ["Offset of field: clap_plugin_gui::get_preferred_api"]
        [::std::mem::offset_of!(clap_plugin_gui, get_preferred_api) - 8usize];
    ["Offset of field: clap_plugin_gui::create"]
        [::std::mem::offset_of!(clap_plugin_gui, create) - 16usize];
    ["Offset of field: clap_plugin_gui::destroy"]
        [::std::mem::offset_of!(clap_plugin_gui, destroy) - 24usize];
    ["Offset of field: clap_plugin_gui::set_scale"]
        [::std::mem::offset_of!(clap_plugin_gui, set_scale) - 32usize];
    ["Offset of field: clap_plugin_gui::get_size"]
        [::std::mem::offset_of!(clap_plugin_gui, get_size) - 40usize];
    ["Offset of field: clap_plugin_gui::can_resize"]
        [::std::mem::offset_of!(clap_plugin_gui, can_resize) - 48usize];
    ["Offset of field: clap_plugin_gui::get_resize_hints"]
        [::std::mem::offset_of!(clap_plugin_gui, get_resize_hints) - 56usize];
    ["Offset of field: clap_plugin_gui::adjust_size"]
        [::std::mem::offset_of!(clap_plugin_gui, adjust_size) - 64usize];
    ["Offset of field: clap_plugin_gui::set_size"]
        [::std::mem::offset_of!(clap_plugin_gui, set_size) - 72usize];
    ["Offset of field: clap_plugin_gui::set_parent"]
        [::std::mem::offset_of!(clap_plugin_gui, set_parent) - 80usize];
    ["Offset of field: clap_plugin_gui::set_transient"]
        [::std::mem::offset_of!(clap_plugin_gui, set_transient) - 88usize];
    ["Offset of field: clap_plugin_gui::suggest_title"]
        [::std::mem::offset_of!(clap_plugin_gui, suggest_title) - 96usize];
    ["Offset of field: clap_plugin_gui::show"]
        [::std::mem::offset_of!(clap_plugin_gui, show) - 104usize];
    ["Offset of field: clap_plugin_gui::hide"]
        [::std::mem::offset_of!(clap_plugin_gui, hide) - 112usize];
};
pub type clap_plugin_gui_t = clap_plugin_gui;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_gui {
    pub resize_hints_changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
    pub request_resize: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, width: u32, height: u32) -> bool,
    >,
    pub request_show: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub request_hide: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub closed:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, was_destroyed: bool)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_gui"][::std::mem::size_of::<clap_host_gui>() - 40usize];
    ["Alignment of clap_host_gui"][::std::mem::align_of::<clap_host_gui>() - 8usize];
    ["Offset of field: clap_host_gui::resize_hints_changed"]
        [::std::mem::offset_of!(clap_host_gui, resize_hints_changed) - 0usize];
    ["Offset of field: clap_host_gui::request_resize"]
        [::std::mem::offset_of!(clap_host_gui, request_resize) - 8usize];
    ["Offset of field: clap_host_gui::request_show"]
        [::std::mem::offset_of!(clap_host_gui, request_show) - 16usize];
    ["Offset of field: clap_host_gui::request_hide"]
        [::std::mem::offset_of!(clap_host_gui, request_hide) - 24usize];
    ["Offset of field: clap_host_gui::closed"]
        [::std::mem::offset_of!(clap_host_gui, closed) - 32usize];
};
pub type clap_host_gui_t = clap_host_gui;
pub const CLAP_EXT_LATENCY: &[u8; 13] = b"clap.latency\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_latency {
    pub get: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_latency"][::std::mem::size_of::<clap_plugin_latency>() - 8usize];
    ["Alignment of clap_plugin_latency"][::std::mem::align_of::<clap_plugin_latency>() - 8usize];
    ["Offset of field: clap_plugin_latency::get"]
        [::std::mem::offset_of!(clap_plugin_latency, get) - 0usize];
};
pub type clap_plugin_latency_t = clap_plugin_latency;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_latency {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_latency"][::std::mem::size_of::<clap_host_latency>() - 8usize];
    ["Alignment of clap_host_latency"][::std::mem::align_of::<clap_host_latency>() - 8usize];
    ["Offset of field: clap_host_latency::changed"]
        [::std::mem::offset_of!(clap_host_latency, changed) - 0usize];
};
pub type clap_host_latency_t = clap_host_latency;
pub const CLAP_EXT_LOG: &[u8; 9] = b"clap.log\0";
pub const CLAP_LOG_DEBUG: _bindgen_ty_9 = 0;
pub const CLAP_LOG_INFO: _bindgen_ty_9 = 1;
pub const CLAP_LOG_WARNING: _bindgen_ty_9 = 2;
pub const CLAP_LOG_ERROR: _bindgen_ty_9 = 3;
pub const CLAP_LOG_FATAL: _bindgen_ty_9 = 4;
pub const CLAP_LOG_HOST_MISBEHAVING: _bindgen_ty_9 = 5;
pub const CLAP_LOG_PLUGIN_MISBEHAVING: _bindgen_ty_9 = 6;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub type clap_log_severity = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_log {
    pub log: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            severity: clap_log_severity,
            msg: *const ::std::os::raw::c_char,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_log"][::std::mem::size_of::<clap_host_log>() - 8usize];
    ["Alignment of clap_host_log"][::std::mem::align_of::<clap_host_log>() - 8usize];
    ["Offset of field: clap_host_log::log"][::std::mem::offset_of!(clap_host_log, log) - 0usize];
};
pub type clap_host_log_t = clap_host_log;
pub const CLAP_EXT_NOTE_NAME: &[u8; 15] = b"clap.note-name\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_note_name {
    pub name: [::std::os::raw::c_char; 256usize],
    pub port: i16,
    pub key: i16,
    pub channel: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_note_name"][::std::mem::size_of::<clap_note_name>() - 262usize];
    ["Alignment of clap_note_name"][::std::mem::align_of::<clap_note_name>() - 2usize];
    ["Offset of field: clap_note_name::name"]
        [::std::mem::offset_of!(clap_note_name, name) - 0usize];
    ["Offset of field: clap_note_name::port"]
        [::std::mem::offset_of!(clap_note_name, port) - 256usize];
    ["Offset of field: clap_note_name::key"]
        [::std::mem::offset_of!(clap_note_name, key) - 258usize];
    ["Offset of field: clap_note_name::channel"]
        [::std::mem::offset_of!(clap_note_name, channel) - 260usize];
};
pub type clap_note_name_t = clap_note_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_note_name {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            note_name: *mut clap_note_name_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_note_name"][::std::mem::size_of::<clap_plugin_note_name>() - 16usize];
    ["Alignment of clap_plugin_note_name"]
        [::std::mem::align_of::<clap_plugin_note_name>() - 8usize];
    ["Offset of field: clap_plugin_note_name::count"]
        [::std::mem::offset_of!(clap_plugin_note_name, count) - 0usize];
    ["Offset of field: clap_plugin_note_name::get"]
        [::std::mem::offset_of!(clap_plugin_note_name, get) - 8usize];
};
pub type clap_plugin_note_name_t = clap_plugin_note_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_note_name {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_note_name"][::std::mem::size_of::<clap_host_note_name>() - 8usize];
    ["Alignment of clap_host_note_name"][::std::mem::align_of::<clap_host_note_name>() - 8usize];
    ["Offset of field: clap_host_note_name::changed"]
        [::std::mem::offset_of!(clap_host_note_name, changed) - 0usize];
};
pub type clap_host_note_name_t = clap_host_note_name;
#[doc = " @page Note Ports\n\n This extension provides a way for the plugin to describe its current note ports.\n If the plugin does not implement this extension, it won't have note input or output.\n The plugin is only allowed to change its note ports configuration while it is deactivated."]
pub const CLAP_EXT_NOTE_PORTS: &[u8; 16] = b"clap.note-ports\0";
pub const clap_note_dialect_CLAP_NOTE_DIALECT_CLAP: clap_note_dialect = 1;
pub const clap_note_dialect_CLAP_NOTE_DIALECT_MIDI: clap_note_dialect = 2;
pub const clap_note_dialect_CLAP_NOTE_DIALECT_MIDI_MPE: clap_note_dialect = 4;
pub const clap_note_dialect_CLAP_NOTE_DIALECT_MIDI2: clap_note_dialect = 8;
pub type clap_note_dialect = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_note_port_info {
    pub id: clap_id,
    pub supported_dialects: u32,
    pub preferred_dialect: u32,
    pub name: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_note_port_info"][::std::mem::size_of::<clap_note_port_info>() - 268usize];
    ["Alignment of clap_note_port_info"][::std::mem::align_of::<clap_note_port_info>() - 4usize];
    ["Offset of field: clap_note_port_info::id"]
        [::std::mem::offset_of!(clap_note_port_info, id) - 0usize];
    ["Offset of field: clap_note_port_info::supported_dialects"]
        [::std::mem::offset_of!(clap_note_port_info, supported_dialects) - 4usize];
    ["Offset of field: clap_note_port_info::preferred_dialect"]
        [::std::mem::offset_of!(clap_note_port_info, preferred_dialect) - 8usize];
    ["Offset of field: clap_note_port_info::name"]
        [::std::mem::offset_of!(clap_note_port_info, name) - 12usize];
};
pub type clap_note_port_info_t = clap_note_port_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_note_ports {
    pub count: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, is_input: bool) -> u32,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            index: u32,
            is_input: bool,
            info: *mut clap_note_port_info_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_note_ports"][::std::mem::size_of::<clap_plugin_note_ports>() - 16usize];
    ["Alignment of clap_plugin_note_ports"]
        [::std::mem::align_of::<clap_plugin_note_ports>() - 8usize];
    ["Offset of field: clap_plugin_note_ports::count"]
        [::std::mem::offset_of!(clap_plugin_note_ports, count) - 0usize];
    ["Offset of field: clap_plugin_note_ports::get"]
        [::std::mem::offset_of!(clap_plugin_note_ports, get) - 8usize];
};
pub type clap_plugin_note_ports_t = clap_plugin_note_ports;
pub const CLAP_NOTE_PORTS_RESCAN_ALL: _bindgen_ty_10 = 1;
pub const CLAP_NOTE_PORTS_RESCAN_NAMES: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_note_ports {
    pub supported_dialects:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> u32>,
    pub rescan: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, flags: u32)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_note_ports"][::std::mem::size_of::<clap_host_note_ports>() - 16usize];
    ["Alignment of clap_host_note_ports"][::std::mem::align_of::<clap_host_note_ports>() - 8usize];
    ["Offset of field: clap_host_note_ports::supported_dialects"]
        [::std::mem::offset_of!(clap_host_note_ports, supported_dialects) - 0usize];
    ["Offset of field: clap_host_note_ports::rescan"]
        [::std::mem::offset_of!(clap_host_note_ports, rescan) - 8usize];
};
pub type clap_host_note_ports_t = clap_host_note_ports;
#[doc = " @page Parameters\n @brief parameters management\n\n Main idea:\n\n The host sees the plugin as an atomic entity; and acts as a controller on top of its parameters.\n The plugin is responsible for keeping its audio processor and its GUI in sync.\n\n The host can at any time read parameters' value on the [main-thread] using\n @ref clap_plugin_params.get_value().\n\n There are two options to communicate parameter value changes, and they are not concurrent.\n - send automation points during clap_plugin.process()\n - send automation points during clap_plugin_params.flush(), for parameter changes\n   without processing audio\n\n When the plugin changes a parameter value, it must inform the host.\n It will send @ref CLAP_EVENT_PARAM_VALUE event during process() or flush().\n If the user is adjusting the value, don't forget to mark the beginning and end\n of the gesture by sending CLAP_EVENT_PARAM_GESTURE_BEGIN and CLAP_EVENT_PARAM_GESTURE_END\n events.\n\n @note MIDI CCs are tricky because you may not know when the parameter adjustment ends.\n Also if the host records incoming MIDI CC and parameter change automation at the same time,\n there will be a conflict at playback: MIDI CC vs Automation.\n The parameter automation will always target the same parameter because the param_id is stable.\n The MIDI CC may have a different mapping in the future and may result in a different playback.\n\n When a MIDI CC changes a parameter's value, set the flag CLAP_EVENT_DONT_RECORD in\n clap_event_param.header.flags. That way the host may record the MIDI CC automation, but not the\n parameter change and there won't be conflict at playback.\n\n Scenarios:\n\n I. Loading a preset\n - load the preset in a temporary state\n - call @ref clap_host_params.rescan() if anything changed\n - call @ref clap_host_latency.changed() if latency changed\n - invalidate any other info that may be cached by the host\n - if the plugin is activated and the preset will introduce breaking changes\n   (latency, audio ports, new parameters, ...) be sure to wait for the host\n   to deactivate the plugin to apply those changes.\n   If there are no breaking changes, the plugin can apply them them right away.\n   The plugin is responsible for updating both its audio processor and its gui.\n\n II. Turning a knob on the DAW interface\n - the host will send an automation event to the plugin via a process() or flush()\n\n III. Turning a knob on the Plugin interface\n - the plugin is responsible for sending the parameter value to its audio processor\n - call clap_host_params->request_flush() or clap_host->request_process().\n - when the host calls either clap_plugin->process() or clap_plugin_params->flush(),\n   send an automation event and don't forget to wrap the parameter change(s)\n   with CLAP_EVENT_PARAM_GESTURE_BEGIN and CLAP_EVENT_PARAM_GESTURE_END to define the\n   beginning and end of the gesture.\n\n IV. Turning a knob via automation\n - host sends an automation point during clap_plugin->process() or clap_plugin_params->flush().\n - the plugin is responsible for updating its GUI\n\n V. Turning a knob via plugin's internal MIDI mapping\n - the plugin sends a CLAP_EVENT_PARAM_VALUE output event, set should_record to false\n - the plugin is responsible for updating its GUI\n\n VI. Adding or removing parameters\n - if the plugin is activated call clap_host->restart()\n - once the plugin isn't active:\n   - apply the new state\n   - if a parameter is gone or is created with an id that may have been used before,\n     call clap_host_params.clear(host, param_id, CLAP_PARAM_CLEAR_ALL)\n   - call clap_host_params->rescan(CLAP_PARAM_RESCAN_ALL)\n\n CLAP allows the plugin to change the parameter range, yet the plugin developer\n should be aware that doing so isn't without risk, especially if you made the\n promise to never change the sound. If you want to be 100% certain that the\n sound will not change with all host, then simply never change the range.\n\n There are two approaches to automations, either you automate the plain value,\n or you automate the knob position. The first option will be robust to a range\n increase, while the second won't be.\n\n If the host goes with the second approach (automating the knob position), it means\n that the plugin is hosted in a relaxed environment regarding sound changes (they are\n accepted, and not a concern as long as they are reasonable). Though, stepped parameters\n should be stored as plain value in the document.\n\n If the host goes with the first approach, there will still be situation where the\n sound may inevitably change. For example, if the plugin increase the range, there\n is an automation playing at the max value and on top of that an LFO is applied.\n See the following curve:\n                                   .\n                                  . .\n          .....                  .   .\n before: .     .     and after: .     .\n\n Persisting parameter values:\n\n Plugins are responsible for persisting their parameter's values between\n sessions by implementing the state extension. Otherwise parameter value will\n not be recalled when reloading a project. Hosts should _not_ try to save and\n restore parameter values for plugins that don't implement the state\n extension.\n\n Advice for the host:\n\n - store plain values in the document (automation)\n - store modulation amount in plain value delta, not in percentage\n - when you apply a CC mapping, remember the min/max plain values so you can adjust\n - do not implement a parameter saving fall back for plugins that don't\n   implement the state extension\n\n Advice for the plugin:\n\n - think carefully about your parameter range when designing your DSP\n - avoid shrinking parameter ranges, they are very likely to change the sound\n - consider changing the parameter range as a tradeoff: what you improve vs what you break\n - make sure to implement saving and loading the parameter values using the\n   state extension\n - if you plan to use adapters for other plugin formats, then you need to pay extra\n   attention to the adapter requirements"]
pub const CLAP_EXT_PARAMS: &[u8; 12] = b"clap.params\0";
pub const CLAP_PARAM_IS_STEPPED: _bindgen_ty_11 = 1;
pub const CLAP_PARAM_IS_PERIODIC: _bindgen_ty_11 = 2;
pub const CLAP_PARAM_IS_HIDDEN: _bindgen_ty_11 = 4;
pub const CLAP_PARAM_IS_READONLY: _bindgen_ty_11 = 8;
pub const CLAP_PARAM_IS_BYPASS: _bindgen_ty_11 = 16;
pub const CLAP_PARAM_IS_AUTOMATABLE: _bindgen_ty_11 = 32;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_NOTE_ID: _bindgen_ty_11 = 64;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_KEY: _bindgen_ty_11 = 128;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_CHANNEL: _bindgen_ty_11 = 256;
pub const CLAP_PARAM_IS_AUTOMATABLE_PER_PORT: _bindgen_ty_11 = 512;
pub const CLAP_PARAM_IS_MODULATABLE: _bindgen_ty_11 = 1024;
pub const CLAP_PARAM_IS_MODULATABLE_PER_NOTE_ID: _bindgen_ty_11 = 2048;
pub const CLAP_PARAM_IS_MODULATABLE_PER_KEY: _bindgen_ty_11 = 4096;
pub const CLAP_PARAM_IS_MODULATABLE_PER_CHANNEL: _bindgen_ty_11 = 8192;
pub const CLAP_PARAM_IS_MODULATABLE_PER_PORT: _bindgen_ty_11 = 16384;
pub const CLAP_PARAM_REQUIRES_PROCESS: _bindgen_ty_11 = 32768;
pub const CLAP_PARAM_IS_ENUM: _bindgen_ty_11 = 65536;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub type clap_param_info_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_param_info {
    pub id: clap_id,
    pub flags: clap_param_info_flags,
    pub cookie: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub module: [::std::os::raw::c_char; 1024usize],
    pub min_value: f64,
    pub max_value: f64,
    pub default_value: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_param_info"][::std::mem::size_of::<clap_param_info>() - 1320usize];
    ["Alignment of clap_param_info"][::std::mem::align_of::<clap_param_info>() - 8usize];
    ["Offset of field: clap_param_info::id"][::std::mem::offset_of!(clap_param_info, id) - 0usize];
    ["Offset of field: clap_param_info::flags"]
        [::std::mem::offset_of!(clap_param_info, flags) - 4usize];
    ["Offset of field: clap_param_info::cookie"]
        [::std::mem::offset_of!(clap_param_info, cookie) - 8usize];
    ["Offset of field: clap_param_info::name"]
        [::std::mem::offset_of!(clap_param_info, name) - 16usize];
    ["Offset of field: clap_param_info::module"]
        [::std::mem::offset_of!(clap_param_info, module) - 272usize];
    ["Offset of field: clap_param_info::min_value"]
        [::std::mem::offset_of!(clap_param_info, min_value) - 1296usize];
    ["Offset of field: clap_param_info::max_value"]
        [::std::mem::offset_of!(clap_param_info, max_value) - 1304usize];
    ["Offset of field: clap_param_info::default_value"]
        [::std::mem::offset_of!(clap_param_info, default_value) - 1312usize];
};
pub type clap_param_info_t = clap_param_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_params {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_index: u32,
            param_info: *mut clap_param_info_t,
        ) -> bool,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            out_value: *mut f64,
        ) -> bool,
    >,
    pub value_to_text: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            value: f64,
            out_buffer: *mut ::std::os::raw::c_char,
            out_buffer_capacity: u32,
        ) -> bool,
    >,
    pub text_to_value: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            param_value_text: *const ::std::os::raw::c_char,
            out_value: *mut f64,
        ) -> bool,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            in_: *const clap_input_events_t,
            out: *const clap_output_events_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_params"][::std::mem::size_of::<clap_plugin_params>() - 48usize];
    ["Alignment of clap_plugin_params"][::std::mem::align_of::<clap_plugin_params>() - 8usize];
    ["Offset of field: clap_plugin_params::count"]
        [::std::mem::offset_of!(clap_plugin_params, count) - 0usize];
    ["Offset of field: clap_plugin_params::get_info"]
        [::std::mem::offset_of!(clap_plugin_params, get_info) - 8usize];
    ["Offset of field: clap_plugin_params::get_value"]
        [::std::mem::offset_of!(clap_plugin_params, get_value) - 16usize];
    ["Offset of field: clap_plugin_params::value_to_text"]
        [::std::mem::offset_of!(clap_plugin_params, value_to_text) - 24usize];
    ["Offset of field: clap_plugin_params::text_to_value"]
        [::std::mem::offset_of!(clap_plugin_params, text_to_value) - 32usize];
    ["Offset of field: clap_plugin_params::flush"]
        [::std::mem::offset_of!(clap_plugin_params, flush) - 40usize];
};
pub type clap_plugin_params_t = clap_plugin_params;
pub const CLAP_PARAM_RESCAN_VALUES: _bindgen_ty_12 = 1;
pub const CLAP_PARAM_RESCAN_TEXT: _bindgen_ty_12 = 2;
pub const CLAP_PARAM_RESCAN_INFO: _bindgen_ty_12 = 4;
pub const CLAP_PARAM_RESCAN_ALL: _bindgen_ty_12 = 8;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type clap_param_rescan_flags = u32;
pub const CLAP_PARAM_CLEAR_ALL: _bindgen_ty_13 = 1;
pub const CLAP_PARAM_CLEAR_AUTOMATIONS: _bindgen_ty_13 = 2;
pub const CLAP_PARAM_CLEAR_MODULATIONS: _bindgen_ty_13 = 4;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub type clap_param_clear_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_params {
    pub rescan: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, flags: clap_param_rescan_flags),
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            param_id: clap_id,
            flags: clap_param_clear_flags,
        ),
    >,
    pub request_flush: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_params"][::std::mem::size_of::<clap_host_params>() - 24usize];
    ["Alignment of clap_host_params"][::std::mem::align_of::<clap_host_params>() - 8usize];
    ["Offset of field: clap_host_params::rescan"]
        [::std::mem::offset_of!(clap_host_params, rescan) - 0usize];
    ["Offset of field: clap_host_params::clear"]
        [::std::mem::offset_of!(clap_host_params, clear) - 8usize];
    ["Offset of field: clap_host_params::request_flush"]
        [::std::mem::offset_of!(clap_host_params, request_flush) - 16usize];
};
pub type clap_host_params_t = clap_host_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_color {
    pub alpha: u8,
    pub red: u8,
    pub green: u8,
    pub blue: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_color"][::std::mem::size_of::<clap_color>() - 4usize];
    ["Alignment of clap_color"][::std::mem::align_of::<clap_color>() - 1usize];
    ["Offset of field: clap_color::alpha"][::std::mem::offset_of!(clap_color, alpha) - 0usize];
    ["Offset of field: clap_color::red"][::std::mem::offset_of!(clap_color, red) - 1usize];
    ["Offset of field: clap_color::green"][::std::mem::offset_of!(clap_color, green) - 2usize];
    ["Offset of field: clap_color::blue"][::std::mem::offset_of!(clap_color, blue) - 3usize];
};
pub type clap_color_t = clap_color;
unsafe extern "C" {
    pub static CLAP_COLOR_TRANSPARENT: clap_color_t;
}
pub const CLAP_EXT_PARAM_INDICATION: &[u8; 24] = b"clap.param-indication/4\0";
pub const CLAP_EXT_PARAM_INDICATION_COMPAT: &[u8; 30] = b"clap.param-indication.draft/4\0";
pub const CLAP_PARAM_INDICATION_AUTOMATION_NONE: _bindgen_ty_14 = 0;
pub const CLAP_PARAM_INDICATION_AUTOMATION_PRESENT: _bindgen_ty_14 = 1;
pub const CLAP_PARAM_INDICATION_AUTOMATION_PLAYING: _bindgen_ty_14 = 2;
pub const CLAP_PARAM_INDICATION_AUTOMATION_RECORDING: _bindgen_ty_14 = 3;
pub const CLAP_PARAM_INDICATION_AUTOMATION_OVERRIDING: _bindgen_ty_14 = 4;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_param_indication {
    pub set_mapping: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            has_mapping: bool,
            color: *const clap_color_t,
            label: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_automation: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            param_id: clap_id,
            automation_state: u32,
            color: *const clap_color_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_param_indication"]
        [::std::mem::size_of::<clap_plugin_param_indication>() - 16usize];
    ["Alignment of clap_plugin_param_indication"]
        [::std::mem::align_of::<clap_plugin_param_indication>() - 8usize];
    ["Offset of field: clap_plugin_param_indication::set_mapping"]
        [::std::mem::offset_of!(clap_plugin_param_indication, set_mapping) - 0usize];
    ["Offset of field: clap_plugin_param_indication::set_automation"]
        [::std::mem::offset_of!(clap_plugin_param_indication, set_automation) - 8usize];
};
pub type clap_plugin_param_indication_t = clap_plugin_param_indication;
pub const CLAP_EXT_POSIX_FD_SUPPORT: &[u8; 22] = b"clap.posix-fd-support\0";
pub const CLAP_POSIX_FD_READ: _bindgen_ty_15 = 1;
pub const CLAP_POSIX_FD_WRITE: _bindgen_ty_15 = 2;
pub const CLAP_POSIX_FD_ERROR: _bindgen_ty_15 = 4;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub type clap_posix_fd_flags_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_posix_fd_support {
    pub on_fd: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            fd: ::std::os::raw::c_int,
            flags: clap_posix_fd_flags_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_posix_fd_support"]
        [::std::mem::size_of::<clap_plugin_posix_fd_support>() - 8usize];
    ["Alignment of clap_plugin_posix_fd_support"]
        [::std::mem::align_of::<clap_plugin_posix_fd_support>() - 8usize];
    ["Offset of field: clap_plugin_posix_fd_support::on_fd"]
        [::std::mem::offset_of!(clap_plugin_posix_fd_support, on_fd) - 0usize];
};
pub type clap_plugin_posix_fd_support_t = clap_plugin_posix_fd_support;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_posix_fd_support {
    pub register_fd: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            fd: ::std::os::raw::c_int,
            flags: clap_posix_fd_flags_t,
        ) -> bool,
    >,
    pub modify_fd: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            fd: ::std::os::raw::c_int,
            flags: clap_posix_fd_flags_t,
        ) -> bool,
    >,
    pub unregister_fd: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, fd: ::std::os::raw::c_int) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_posix_fd_support"]
        [::std::mem::size_of::<clap_host_posix_fd_support>() - 24usize];
    ["Alignment of clap_host_posix_fd_support"]
        [::std::mem::align_of::<clap_host_posix_fd_support>() - 8usize];
    ["Offset of field: clap_host_posix_fd_support::register_fd"]
        [::std::mem::offset_of!(clap_host_posix_fd_support, register_fd) - 0usize];
    ["Offset of field: clap_host_posix_fd_support::modify_fd"]
        [::std::mem::offset_of!(clap_host_posix_fd_support, modify_fd) - 8usize];
    ["Offset of field: clap_host_posix_fd_support::unregister_fd"]
        [::std::mem::offset_of!(clap_host_posix_fd_support, unregister_fd) - 16usize];
};
pub type clap_host_posix_fd_support_t = clap_host_posix_fd_support;
pub const CLAP_EXT_PRESET_LOAD: &[u8; 19] = b"clap.preset-load/2\0";
pub const CLAP_EXT_PRESET_LOAD_COMPAT: &[u8; 25] = b"clap.preset-load.draft/2\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_preset_load {
    pub from_location: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            location_kind: u32,
            location: *const ::std::os::raw::c_char,
            load_key: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_preset_load"][::std::mem::size_of::<clap_plugin_preset_load>() - 8usize];
    ["Alignment of clap_plugin_preset_load"]
        [::std::mem::align_of::<clap_plugin_preset_load>() - 8usize];
    ["Offset of field: clap_plugin_preset_load::from_location"]
        [::std::mem::offset_of!(clap_plugin_preset_load, from_location) - 0usize];
};
pub type clap_plugin_preset_load_t = clap_plugin_preset_load;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_preset_load {
    pub on_error: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            location_kind: u32,
            location: *const ::std::os::raw::c_char,
            load_key: *const ::std::os::raw::c_char,
            os_error: i32,
            msg: *const ::std::os::raw::c_char,
        ),
    >,
    pub loaded: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            location_kind: u32,
            location: *const ::std::os::raw::c_char,
            load_key: *const ::std::os::raw::c_char,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_preset_load"][::std::mem::size_of::<clap_host_preset_load>() - 16usize];
    ["Alignment of clap_host_preset_load"]
        [::std::mem::align_of::<clap_host_preset_load>() - 8usize];
    ["Offset of field: clap_host_preset_load::on_error"]
        [::std::mem::offset_of!(clap_host_preset_load, on_error) - 0usize];
    ["Offset of field: clap_host_preset_load::loaded"]
        [::std::mem::offset_of!(clap_host_preset_load, loaded) - 8usize];
};
pub type clap_host_preset_load_t = clap_host_preset_load;
pub const CLAP_EXT_REMOTE_CONTROLS: &[u8; 23] = b"clap.remote-controls/2\0";
pub const CLAP_EXT_REMOTE_CONTROLS_COMPAT: &[u8; 29] = b"clap.remote-controls.draft/2\0";
pub const CLAP_REMOTE_CONTROLS_COUNT: _bindgen_ty_16 = 8;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_remote_controls_page {
    pub section_name: [::std::os::raw::c_char; 256usize],
    pub page_id: clap_id,
    pub page_name: [::std::os::raw::c_char; 256usize],
    pub param_ids: [clap_id; 8usize],
    pub is_for_preset: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_remote_controls_page"]
        [::std::mem::size_of::<clap_remote_controls_page>() - 552usize];
    ["Alignment of clap_remote_controls_page"]
        [::std::mem::align_of::<clap_remote_controls_page>() - 4usize];
    ["Offset of field: clap_remote_controls_page::section_name"]
        [::std::mem::offset_of!(clap_remote_controls_page, section_name) - 0usize];
    ["Offset of field: clap_remote_controls_page::page_id"]
        [::std::mem::offset_of!(clap_remote_controls_page, page_id) - 256usize];
    ["Offset of field: clap_remote_controls_page::page_name"]
        [::std::mem::offset_of!(clap_remote_controls_page, page_name) - 260usize];
    ["Offset of field: clap_remote_controls_page::param_ids"]
        [::std::mem::offset_of!(clap_remote_controls_page, param_ids) - 516usize];
    ["Offset of field: clap_remote_controls_page::is_for_preset"]
        [::std::mem::offset_of!(clap_remote_controls_page, is_for_preset) - 548usize];
};
pub type clap_remote_controls_page_t = clap_remote_controls_page;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_remote_controls {
    pub count: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            page_index: u32,
            page: *mut clap_remote_controls_page_t,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_remote_controls"]
        [::std::mem::size_of::<clap_plugin_remote_controls>() - 16usize];
    ["Alignment of clap_plugin_remote_controls"]
        [::std::mem::align_of::<clap_plugin_remote_controls>() - 8usize];
    ["Offset of field: clap_plugin_remote_controls::count"]
        [::std::mem::offset_of!(clap_plugin_remote_controls, count) - 0usize];
    ["Offset of field: clap_plugin_remote_controls::get"]
        [::std::mem::offset_of!(clap_plugin_remote_controls, get) - 8usize];
};
pub type clap_plugin_remote_controls_t = clap_plugin_remote_controls;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_remote_controls {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
    pub suggest_page:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t, page_id: clap_id)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_remote_controls"]
        [::std::mem::size_of::<clap_host_remote_controls>() - 16usize];
    ["Alignment of clap_host_remote_controls"]
        [::std::mem::align_of::<clap_host_remote_controls>() - 8usize];
    ["Offset of field: clap_host_remote_controls::changed"]
        [::std::mem::offset_of!(clap_host_remote_controls, changed) - 0usize];
    ["Offset of field: clap_host_remote_controls::suggest_page"]
        [::std::mem::offset_of!(clap_host_remote_controls, suggest_page) - 8usize];
};
pub type clap_host_remote_controls_t = clap_host_remote_controls;
pub const CLAP_EXT_RENDER: &[u8; 12] = b"clap.render\0";
pub const CLAP_RENDER_REALTIME: _bindgen_ty_17 = 0;
pub const CLAP_RENDER_OFFLINE: _bindgen_ty_17 = 1;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub type clap_plugin_render_mode = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_render {
    pub has_hard_realtime_requirement:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> bool>,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, mode: clap_plugin_render_mode) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_render"][::std::mem::size_of::<clap_plugin_render>() - 16usize];
    ["Alignment of clap_plugin_render"][::std::mem::align_of::<clap_plugin_render>() - 8usize];
    ["Offset of field: clap_plugin_render::has_hard_realtime_requirement"]
        [::std::mem::offset_of!(clap_plugin_render, has_hard_realtime_requirement) - 0usize];
    ["Offset of field: clap_plugin_render::set"]
        [::std::mem::offset_of!(clap_plugin_render, set) - 8usize];
};
pub type clap_plugin_render_t = clap_plugin_render;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_istream {
    pub ctx: *mut ::std::os::raw::c_void,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *const clap_istream,
            buffer: *mut ::std::os::raw::c_void,
            size: u64,
        ) -> i64,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_istream"][::std::mem::size_of::<clap_istream>() - 16usize];
    ["Alignment of clap_istream"][::std::mem::align_of::<clap_istream>() - 8usize];
    ["Offset of field: clap_istream::ctx"][::std::mem::offset_of!(clap_istream, ctx) - 0usize];
    ["Offset of field: clap_istream::read"][::std::mem::offset_of!(clap_istream, read) - 8usize];
};
pub type clap_istream_t = clap_istream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_ostream {
    pub ctx: *mut ::std::os::raw::c_void,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *const clap_ostream,
            buffer: *const ::std::os::raw::c_void,
            size: u64,
        ) -> i64,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_ostream"][::std::mem::size_of::<clap_ostream>() - 16usize];
    ["Alignment of clap_ostream"][::std::mem::align_of::<clap_ostream>() - 8usize];
    ["Offset of field: clap_ostream::ctx"][::std::mem::offset_of!(clap_ostream, ctx) - 0usize];
    ["Offset of field: clap_ostream::write"][::std::mem::offset_of!(clap_ostream, write) - 8usize];
};
pub type clap_ostream_t = clap_ostream;
pub const CLAP_EXT_STATE_CONTEXT: &[u8; 21] = b"clap.state-context/2\0";
pub const clap_plugin_state_context_type_CLAP_STATE_CONTEXT_FOR_PRESET:
    clap_plugin_state_context_type = 1;
pub const clap_plugin_state_context_type_CLAP_STATE_CONTEXT_FOR_DUPLICATE:
    clap_plugin_state_context_type = 2;
pub const clap_plugin_state_context_type_CLAP_STATE_CONTEXT_FOR_PROJECT:
    clap_plugin_state_context_type = 3;
pub type clap_plugin_state_context_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_state_context {
    pub save: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            stream: *const clap_ostream_t,
            context_type: u32,
        ) -> bool,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            stream: *const clap_istream_t,
            context_type: u32,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_state_context"]
        [::std::mem::size_of::<clap_plugin_state_context>() - 16usize];
    ["Alignment of clap_plugin_state_context"]
        [::std::mem::align_of::<clap_plugin_state_context>() - 8usize];
    ["Offset of field: clap_plugin_state_context::save"]
        [::std::mem::offset_of!(clap_plugin_state_context, save) - 0usize];
    ["Offset of field: clap_plugin_state_context::load"]
        [::std::mem::offset_of!(clap_plugin_state_context, load) - 8usize];
};
pub type clap_plugin_state_context_t = clap_plugin_state_context;
#[doc = " @page State\n @brief state management\n\n Plugins can implement this extension to save and restore both parameter\n values and non-parameter state. This is used to persist a plugin's state\n between project reloads, when duplicating and copying plugin instances, and\n for host-side preset management.\n\n If you need to know if the save/load operation is meant for duplicating a plugin\n instance, for saving/loading a plugin preset or while saving/loading the project\n then consider implementing CLAP_EXT_STATE_CONTEXT in addition to CLAP_EXT_STATE."]
pub const CLAP_EXT_STATE: &[u8; 11] = b"clap.state\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_state {
    pub save: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, stream: *const clap_ostream_t) -> bool,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, stream: *const clap_istream_t) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_state"][::std::mem::size_of::<clap_plugin_state>() - 16usize];
    ["Alignment of clap_plugin_state"][::std::mem::align_of::<clap_plugin_state>() - 8usize];
    ["Offset of field: clap_plugin_state::save"]
        [::std::mem::offset_of!(clap_plugin_state, save) - 0usize];
    ["Offset of field: clap_plugin_state::load"]
        [::std::mem::offset_of!(clap_plugin_state, load) - 8usize];
};
pub type clap_plugin_state_t = clap_plugin_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_state {
    pub mark_dirty: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_state"][::std::mem::size_of::<clap_host_state>() - 8usize];
    ["Alignment of clap_host_state"][::std::mem::align_of::<clap_host_state>() - 8usize];
    ["Offset of field: clap_host_state::mark_dirty"]
        [::std::mem::offset_of!(clap_host_state, mark_dirty) - 0usize];
};
pub type clap_host_state_t = clap_host_state;
pub const CLAP_EXT_SURROUND: &[u8; 16] = b"clap.surround/4\0";
pub const CLAP_EXT_SURROUND_COMPAT: &[u8; 22] = b"clap.surround.draft/4\0";
pub const CLAP_PORT_SURROUND: &[u8; 9] = b"surround\0";
pub const CLAP_SURROUND_FL: _bindgen_ty_18 = 0;
pub const CLAP_SURROUND_FR: _bindgen_ty_18 = 1;
pub const CLAP_SURROUND_FC: _bindgen_ty_18 = 2;
pub const CLAP_SURROUND_LFE: _bindgen_ty_18 = 3;
pub const CLAP_SURROUND_BL: _bindgen_ty_18 = 4;
pub const CLAP_SURROUND_BR: _bindgen_ty_18 = 5;
pub const CLAP_SURROUND_FLC: _bindgen_ty_18 = 6;
pub const CLAP_SURROUND_FRC: _bindgen_ty_18 = 7;
pub const CLAP_SURROUND_BC: _bindgen_ty_18 = 8;
pub const CLAP_SURROUND_SL: _bindgen_ty_18 = 9;
pub const CLAP_SURROUND_SR: _bindgen_ty_18 = 10;
pub const CLAP_SURROUND_TC: _bindgen_ty_18 = 11;
pub const CLAP_SURROUND_TFL: _bindgen_ty_18 = 12;
pub const CLAP_SURROUND_TFC: _bindgen_ty_18 = 13;
pub const CLAP_SURROUND_TFR: _bindgen_ty_18 = 14;
pub const CLAP_SURROUND_TBL: _bindgen_ty_18 = 15;
pub const CLAP_SURROUND_TBC: _bindgen_ty_18 = 16;
pub const CLAP_SURROUND_TBR: _bindgen_ty_18 = 17;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_surround {
    pub is_channel_mask_supported: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, channel_mask: u64) -> bool,
    >,
    pub get_channel_map: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const clap_plugin_t,
            is_input: bool,
            port_index: u32,
            channel_map: *mut u8,
            channel_map_capacity: u32,
        ) -> u32,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_surround"][::std::mem::size_of::<clap_plugin_surround>() - 16usize];
    ["Alignment of clap_plugin_surround"][::std::mem::align_of::<clap_plugin_surround>() - 8usize];
    ["Offset of field: clap_plugin_surround::is_channel_mask_supported"]
        [::std::mem::offset_of!(clap_plugin_surround, is_channel_mask_supported) - 0usize];
    ["Offset of field: clap_plugin_surround::get_channel_map"]
        [::std::mem::offset_of!(clap_plugin_surround, get_channel_map) - 8usize];
};
pub type clap_plugin_surround_t = clap_plugin_surround;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_surround {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_surround"][::std::mem::size_of::<clap_host_surround>() - 8usize];
    ["Alignment of clap_host_surround"][::std::mem::align_of::<clap_host_surround>() - 8usize];
    ["Offset of field: clap_host_surround::changed"]
        [::std::mem::offset_of!(clap_host_surround, changed) - 0usize];
};
pub type clap_host_surround_t = clap_host_surround;
pub const CLAP_EXT_TAIL: &[u8; 10] = b"clap.tail\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_tail {
    pub get: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t) -> u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_tail"][::std::mem::size_of::<clap_plugin_tail>() - 8usize];
    ["Alignment of clap_plugin_tail"][::std::mem::align_of::<clap_plugin_tail>() - 8usize];
    ["Offset of field: clap_plugin_tail::get"]
        [::std::mem::offset_of!(clap_plugin_tail, get) - 0usize];
};
pub type clap_plugin_tail_t = clap_plugin_tail;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_tail {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_tail"][::std::mem::size_of::<clap_host_tail>() - 8usize];
    ["Alignment of clap_host_tail"][::std::mem::align_of::<clap_host_tail>() - 8usize];
    ["Offset of field: clap_host_tail::changed"]
        [::std::mem::offset_of!(clap_host_tail, changed) - 0usize];
};
pub type clap_host_tail_t = clap_host_tail;
pub const CLAP_EXT_THREAD_CHECK: &[u8; 18] = b"clap.thread-check\0";
#[doc = " @page thread-check\n\n CLAP defines two symbolic threads:\n\n main-thread:\n    This is the thread in which most of the interaction between the plugin and host happens.\n    This will be the same OS thread throughout the lifetime of the plug-in.\n    On macOS and Windows, this must be the thread on which gui and timer events are received\n    (i.e., the main thread of the program).\n    It isn't a realtime thread, yet this thread needs to respond fast enough to allow responsive\n    user interaction, so it is strongly recommended plugins run long,and expensive or blocking\n    tasks such as preset indexing or asset loading in dedicated background threads started by the\n    plugin.\n\n audio-thread:\n    This thread can be used for realtime audio processing. Its execution should be as\n    deterministic as possible to meet the audio interface's deadline (can be <1ms). There are a\n    known set of operations that should be avoided: malloc() and free(), contended locks and\n    mutexes, I/O, waiting, and so forth.\n\n    The audio-thread is symbolic, there isn't one OS thread that remains the\n    audio-thread for the plugin lifetime. A host is may opt to have a\n    thread pool and the plugin.process() call may be scheduled on different OS threads over time.\n    However, the host must guarantee that single plugin instance will not be two audio-threads\n    at the same time.\n\n    Functions marked with [audio-thread] **ARE NOT CONCURRENT**. The host may mark any OS thread,\n    including the main-thread as the audio-thread, as long as it can guarantee that only one OS\n    thread is the audio-thread at a time in a plugin instance. The audio-thread can be seen as a\n    concurrency guard for all functions marked with [audio-thread].\n\n    The real-time constraint on the [audio-thread] interacts closely with the render extension.\n    If a plugin doesn't implement render, then that plugin must have all [audio-thread] functions\n    meet the real time standard. If the plugin does implement render, and returns true when\n    render mode is set to real-time or if the plugin advertises a hard realtime requirement, it\n    must implement realtime constraints. Hosts also provide functions marked [audio-thread].\n    These can be safely called by a plugin in the audio thread. Therefore hosts must either (1)\n    implement those functions meeting the real-time constraints or (2) not process plugins which\n    advertise a hard realtime constraint or don't implement the render extension. Hosts which\n    provide [audio-thread] functions outside these conditions may experience inconsistent or\n    inaccurate rendering.\n\n  Clap also tags some functions as [thread-safe]. Functions tagged as [thread-safe] can be called\n  from any thread unless explicitly counter-indicated (for instance [thread-safe, !audio-thread])\n  and may be called concurrently. Since a [thread-safe] function may be called from the\n  [audio-thread] unless explicitly counter-indicated, it must also meet the realtime constraints\n  as describes above."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_thread_check {
    pub is_main_thread:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
    pub is_audio_thread:
        ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_thread_check"][::std::mem::size_of::<clap_host_thread_check>() - 16usize];
    ["Alignment of clap_host_thread_check"]
        [::std::mem::align_of::<clap_host_thread_check>() - 8usize];
    ["Offset of field: clap_host_thread_check::is_main_thread"]
        [::std::mem::offset_of!(clap_host_thread_check, is_main_thread) - 0usize];
    ["Offset of field: clap_host_thread_check::is_audio_thread"]
        [::std::mem::offset_of!(clap_host_thread_check, is_audio_thread) - 8usize];
};
#[doc = " @page thread-check\n\n CLAP defines two symbolic threads:\n\n main-thread:\n    This is the thread in which most of the interaction between the plugin and host happens.\n    This will be the same OS thread throughout the lifetime of the plug-in.\n    On macOS and Windows, this must be the thread on which gui and timer events are received\n    (i.e., the main thread of the program).\n    It isn't a realtime thread, yet this thread needs to respond fast enough to allow responsive\n    user interaction, so it is strongly recommended plugins run long,and expensive or blocking\n    tasks such as preset indexing or asset loading in dedicated background threads started by the\n    plugin.\n\n audio-thread:\n    This thread can be used for realtime audio processing. Its execution should be as\n    deterministic as possible to meet the audio interface's deadline (can be <1ms). There are a\n    known set of operations that should be avoided: malloc() and free(), contended locks and\n    mutexes, I/O, waiting, and so forth.\n\n    The audio-thread is symbolic, there isn't one OS thread that remains the\n    audio-thread for the plugin lifetime. A host is may opt to have a\n    thread pool and the plugin.process() call may be scheduled on different OS threads over time.\n    However, the host must guarantee that single plugin instance will not be two audio-threads\n    at the same time.\n\n    Functions marked with [audio-thread] **ARE NOT CONCURRENT**. The host may mark any OS thread,\n    including the main-thread as the audio-thread, as long as it can guarantee that only one OS\n    thread is the audio-thread at a time in a plugin instance. The audio-thread can be seen as a\n    concurrency guard for all functions marked with [audio-thread].\n\n    The real-time constraint on the [audio-thread] interacts closely with the render extension.\n    If a plugin doesn't implement render, then that plugin must have all [audio-thread] functions\n    meet the real time standard. If the plugin does implement render, and returns true when\n    render mode is set to real-time or if the plugin advertises a hard realtime requirement, it\n    must implement realtime constraints. Hosts also provide functions marked [audio-thread].\n    These can be safely called by a plugin in the audio thread. Therefore hosts must either (1)\n    implement those functions meeting the real-time constraints or (2) not process plugins which\n    advertise a hard realtime constraint or don't implement the render extension. Hosts which\n    provide [audio-thread] functions outside these conditions may experience inconsistent or\n    inaccurate rendering.\n\n  Clap also tags some functions as [thread-safe]. Functions tagged as [thread-safe] can be called\n  from any thread unless explicitly counter-indicated (for instance [thread-safe, !audio-thread])\n  and may be called concurrently. Since a [thread-safe] function may be called from the\n  [audio-thread] unless explicitly counter-indicated, it must also meet the realtime constraints\n  as describes above."]
pub type clap_host_thread_check_t = clap_host_thread_check;
#[doc = " @page\n\n This extension lets the plugin use the host's thread pool.\n\n The plugin must provide @ref clap_plugin_thread_pool, and the host may provide @ref\n clap_host_thread_pool. If it doesn't, the plugin should process its data by its own means. In\n the worst case, a single threaded for-loop.\n\n Simple example with N voices to process\n\n @code\n void myplug_thread_pool_exec(const clap_plugin *plugin, uint32_t voice_index)\n {\n    compute_voice(plugin, voice_index);\n }\n\n void myplug_process(const clap_plugin *plugin, const clap_process *process)\n {\n    ...\n    bool didComputeVoices = false;\n    if (host_thread_pool && host_thread_pool.exec)\n       didComputeVoices = host_thread_pool.request_exec(host, plugin, N);\n\n    if (!didComputeVoices)\n       for (uint32_t i = 0; i < N; ++i)\n          myplug_thread_pool_exec(plugin, i);\n    ...\n }\n @endcode\n\n Be aware that using a thread pool may break hard real-time rules due to the thread\n synchronization involved.\n\n If the host knows that it is running under hard real-time pressure it may decide to not\n provide this interface."]
pub const CLAP_EXT_THREAD_POOL: &[u8; 17] = b"clap.thread-pool\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_thread_pool {
    pub exec:
        ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t, task_index: u32)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_thread_pool"][::std::mem::size_of::<clap_plugin_thread_pool>() - 8usize];
    ["Alignment of clap_plugin_thread_pool"]
        [::std::mem::align_of::<clap_plugin_thread_pool>() - 8usize];
    ["Offset of field: clap_plugin_thread_pool::exec"]
        [::std::mem::offset_of!(clap_plugin_thread_pool, exec) - 0usize];
};
pub type clap_plugin_thread_pool_t = clap_plugin_thread_pool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_thread_pool {
    pub request_exec: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, num_tasks: u32) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_thread_pool"][::std::mem::size_of::<clap_host_thread_pool>() - 8usize];
    ["Alignment of clap_host_thread_pool"]
        [::std::mem::align_of::<clap_host_thread_pool>() - 8usize];
    ["Offset of field: clap_host_thread_pool::request_exec"]
        [::std::mem::offset_of!(clap_host_thread_pool, request_exec) - 0usize];
};
pub type clap_host_thread_pool_t = clap_host_thread_pool;
pub const CLAP_EXT_TIMER_SUPPORT: &[u8; 19] = b"clap.timer-support\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_timer_support {
    pub on_timer: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, timer_id: clap_id),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_timer_support"]
        [::std::mem::size_of::<clap_plugin_timer_support>() - 8usize];
    ["Alignment of clap_plugin_timer_support"]
        [::std::mem::align_of::<clap_plugin_timer_support>() - 8usize];
    ["Offset of field: clap_plugin_timer_support::on_timer"]
        [::std::mem::offset_of!(clap_plugin_timer_support, on_timer) - 0usize];
};
pub type clap_plugin_timer_support_t = clap_plugin_timer_support;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_timer_support {
    pub register_timer: ::std::option::Option<
        unsafe extern "C" fn(
            host: *const clap_host_t,
            period_ms: u32,
            timer_id: *mut clap_id,
        ) -> bool,
    >,
    pub unregister_timer: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, timer_id: clap_id) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_timer_support"][::std::mem::size_of::<clap_host_timer_support>() - 16usize];
    ["Alignment of clap_host_timer_support"]
        [::std::mem::align_of::<clap_host_timer_support>() - 8usize];
    ["Offset of field: clap_host_timer_support::register_timer"]
        [::std::mem::offset_of!(clap_host_timer_support, register_timer) - 0usize];
    ["Offset of field: clap_host_timer_support::unregister_timer"]
        [::std::mem::offset_of!(clap_host_timer_support, unregister_timer) - 8usize];
};
pub type clap_host_timer_support_t = clap_host_timer_support;
pub const CLAP_EXT_TRACK_INFO: &[u8; 18] = b"clap.track-info/1\0";
pub const CLAP_EXT_TRACK_INFO_COMPAT: &[u8; 24] = b"clap.track-info.draft/1\0";
pub const CLAP_TRACK_INFO_HAS_TRACK_NAME: _bindgen_ty_19 = 1;
pub const CLAP_TRACK_INFO_HAS_TRACK_COLOR: _bindgen_ty_19 = 2;
pub const CLAP_TRACK_INFO_HAS_AUDIO_CHANNEL: _bindgen_ty_19 = 4;
pub const CLAP_TRACK_INFO_IS_FOR_RETURN_TRACK: _bindgen_ty_19 = 8;
pub const CLAP_TRACK_INFO_IS_FOR_BUS: _bindgen_ty_19 = 16;
pub const CLAP_TRACK_INFO_IS_FOR_MASTER: _bindgen_ty_19 = 32;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_track_info {
    pub flags: u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub color: clap_color_t,
    pub audio_channel_count: i32,
    pub audio_port_type: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_track_info"][::std::mem::size_of::<clap_track_info>() - 280usize];
    ["Alignment of clap_track_info"][::std::mem::align_of::<clap_track_info>() - 8usize];
    ["Offset of field: clap_track_info::flags"]
        [::std::mem::offset_of!(clap_track_info, flags) - 0usize];
    ["Offset of field: clap_track_info::name"]
        [::std::mem::offset_of!(clap_track_info, name) - 8usize];
    ["Offset of field: clap_track_info::color"]
        [::std::mem::offset_of!(clap_track_info, color) - 264usize];
    ["Offset of field: clap_track_info::audio_channel_count"]
        [::std::mem::offset_of!(clap_track_info, audio_channel_count) - 268usize];
    ["Offset of field: clap_track_info::audio_port_type"]
        [::std::mem::offset_of!(clap_track_info, audio_port_type) - 272usize];
};
pub type clap_track_info_t = clap_track_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_track_info {
    pub changed: ::std::option::Option<unsafe extern "C" fn(plugin: *const clap_plugin_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_track_info"][::std::mem::size_of::<clap_plugin_track_info>() - 8usize];
    ["Alignment of clap_plugin_track_info"]
        [::std::mem::align_of::<clap_plugin_track_info>() - 8usize];
    ["Offset of field: clap_plugin_track_info::changed"]
        [::std::mem::offset_of!(clap_plugin_track_info, changed) - 0usize];
};
pub type clap_plugin_track_info_t = clap_plugin_track_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_track_info {
    pub get: ::std::option::Option<
        unsafe extern "C" fn(host: *const clap_host_t, info: *mut clap_track_info_t) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_track_info"][::std::mem::size_of::<clap_host_track_info>() - 8usize];
    ["Alignment of clap_host_track_info"][::std::mem::align_of::<clap_host_track_info>() - 8usize];
    ["Offset of field: clap_host_track_info::get"]
        [::std::mem::offset_of!(clap_host_track_info, get) - 0usize];
};
pub type clap_host_track_info_t = clap_host_track_info;
pub const CLAP_EXT_VOICE_INFO: &[u8; 16] = b"clap.voice-info\0";
pub const CLAP_VOICE_INFO_SUPPORTS_OVERLAPPING_NOTES: _bindgen_ty_20 = 1;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_voice_info {
    pub voice_count: u32,
    pub voice_capacity: u32,
    pub flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_voice_info"][::std::mem::size_of::<clap_voice_info>() - 16usize];
    ["Alignment of clap_voice_info"][::std::mem::align_of::<clap_voice_info>() - 8usize];
    ["Offset of field: clap_voice_info::voice_count"]
        [::std::mem::offset_of!(clap_voice_info, voice_count) - 0usize];
    ["Offset of field: clap_voice_info::voice_capacity"]
        [::std::mem::offset_of!(clap_voice_info, voice_capacity) - 4usize];
    ["Offset of field: clap_voice_info::flags"]
        [::std::mem::offset_of!(clap_voice_info, flags) - 8usize];
};
pub type clap_voice_info_t = clap_voice_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_plugin_voice_info {
    pub get: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const clap_plugin_t, info: *mut clap_voice_info_t) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_plugin_voice_info"][::std::mem::size_of::<clap_plugin_voice_info>() - 8usize];
    ["Alignment of clap_plugin_voice_info"]
        [::std::mem::align_of::<clap_plugin_voice_info>() - 8usize];
    ["Offset of field: clap_plugin_voice_info::get"]
        [::std::mem::offset_of!(clap_plugin_voice_info, get) - 0usize];
};
pub type clap_plugin_voice_info_t = clap_plugin_voice_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clap_host_voice_info {
    pub changed: ::std::option::Option<unsafe extern "C" fn(host: *const clap_host_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clap_host_voice_info"][::std::mem::size_of::<clap_host_voice_info>() - 8usize];
    ["Alignment of clap_host_voice_info"][::std::mem::align_of::<clap_host_voice_info>() - 8usize];
    ["Offset of field: clap_host_voice_info::changed"]
        [::std::mem::offset_of!(clap_host_voice_info, changed) - 0usize];
};
pub type clap_host_voice_info_t = clap_host_voice_info;
